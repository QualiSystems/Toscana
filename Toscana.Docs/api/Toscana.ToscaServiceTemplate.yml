### YamlMime:ManagedReference
items:
- uid: Toscana.ToscaServiceTemplate
  commentId: T:Toscana.ToscaServiceTemplate
  id: ToscaServiceTemplate
  parent: Toscana
  children:
  - Toscana.ToscaServiceTemplate.#ctor
  - Toscana.ToscaServiceTemplate.ArtifactTypes
  - Toscana.ToscaServiceTemplate.CapabilityTypes
  - Toscana.ToscaServiceTemplate.DataTypes
  - Toscana.ToscaServiceTemplate.Description
  - Toscana.ToscaServiceTemplate.DslDefinitions
  - Toscana.ToscaServiceTemplate.Imports
  - Toscana.ToscaServiceTemplate.Load(System.IO.Stream)
  - Toscana.ToscaServiceTemplate.Load(System.String)
  - Toscana.ToscaServiceTemplate.Metadata
  - Toscana.ToscaServiceTemplate.NodeTypes
  - Toscana.ToscaServiceTemplate.RelationshipTypes
  - Toscana.ToscaServiceTemplate.Repositories
  - Toscana.ToscaServiceTemplate.Save(System.IO.Stream)
  - Toscana.ToscaServiceTemplate.Save(System.String)
  - Toscana.ToscaServiceTemplate.TopologyTemplate
  - Toscana.ToscaServiceTemplate.ToscaDefinitionsVersion
  langs:
  - csharp
  - vb
  name: ToscaServiceTemplate
  nameWithType: ToscaServiceTemplate
  fullName: Toscana.ToscaServiceTemplate
  type: Class
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaServiceTemplate
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 14
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nA TOSCA Service Template (YAML) document contains element definitions of building blocks for cloud application, \nor complete models of cloud applications. This section describes the top-level structural \nelements (TOSCA keynames) along with their grammars, which are allowed to appear in a TOSCA Service Template document.\n"
  example: []
  syntax:
    content: public class ToscaServiceTemplate
    content.vb: Public Class ToscaServiceTemplate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Toscana.ToscaServiceTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaServiceTemplate,Toscana.ToscaServiceTemplate},System.Func{Toscana.ToscaServiceTemplate,System.Boolean})
  - Toscana.ToscaServiceTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaServiceTemplate,Toscana.ToscaServiceTemplate})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Toscana.ToscaServiceTemplate.#ctor
  commentId: M:Toscana.ToscaServiceTemplate.#ctor
  id: '#ctor'
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: ToscaServiceTemplate()
  nameWithType: ToscaServiceTemplate.ToscaServiceTemplate()
  fullName: Toscana.ToscaServiceTemplate.ToscaServiceTemplate()
  type: Constructor
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: .ctor
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 19
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nInitializes an instance of Service Template\n"
  example: []
  syntax:
    content: public ToscaServiceTemplate()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.ToscaDefinitionsVersion
  commentId: P:Toscana.ToscaServiceTemplate.ToscaDefinitionsVersion
  id: ToscaDefinitionsVersion
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: ToscaDefinitionsVersion
  nameWithType: ToscaServiceTemplate.ToscaDefinitionsVersion
  fullName: Toscana.ToscaServiceTemplate.ToscaDefinitionsVersion
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaDefinitionsVersion
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 33
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDefines the version of the TOSCA Simple Profile specification the template (grammar) complies with.\n"
  example: []
  syntax:
    content: >-
      [Required(ErrorMessage = "tosca_definitions_version is required on tosca definition")]

      [RestrictedValues(new string[]{"tosca_simple_yaml_1_0"}, "tosca_definitions_version shall be tosca_simple_yaml_1_0")]

      public string ToscaDefinitionsVersion { get; set; }
    content.vb: >-
      <Required(ErrorMessage:="tosca_definitions_version is required on tosca definition")>

      <RestrictedValues(New String() {"tosca_simple_yaml_1_0"}, "tosca_definitions_version shall be tosca_simple_yaml_1_0")>

      Public Property ToscaDefinitionsVersion As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: tosca_definitions_version is required on tosca definition
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.Metadata
  commentId: P:Toscana.ToscaServiceTemplate.Metadata
  id: Metadata
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: ToscaServiceTemplate.Metadata
  fullName: Toscana.ToscaServiceTemplate.Metadata
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Metadata
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 40
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDefines a section used to declare additional metadata information.  Domain-specific TOSCA profile specifications may define keynames that are required for their implementations.\n"
  example: []
  syntax:
    content: public ToscaServiceTemplateMetadata Metadata { get; set; }
    content.vb: Public Property Metadata As ToscaServiceTemplateMetadata
    parameters: []
    return:
      type: Toscana.ToscaServiceTemplateMetadata
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.Description
  commentId: P:Toscana.ToscaServiceTemplate.Description
  id: Description
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ToscaServiceTemplate.Description
  fullName: Toscana.ToscaServiceTemplate.Description
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Description
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 45
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDeclares a description for this Service Template and its contents.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    content.vb: Public Property Description As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.DslDefinitions
  commentId: P:Toscana.ToscaServiceTemplate.DslDefinitions
  id: DslDefinitions
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: DslDefinitions
  nameWithType: ToscaServiceTemplate.DslDefinitions
  fullName: Toscana.ToscaServiceTemplate.DslDefinitions
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: DslDefinitions
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 50
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDeclares optional DSL-specific definitions and conventions.  For example, in YAML, this allows defining reusable YAML macros (i.e., YAML alias anchors) for use throughout the TOSCA Service Template.\n"
  example: []
  syntax:
    content: public object DslDefinitions { get; set; }
    content.vb: Public Property DslDefinitions As Object
    parameters: []
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.Repositories
  commentId: P:Toscana.ToscaServiceTemplate.Repositories
  id: Repositories
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Repositories
  nameWithType: ToscaServiceTemplate.Repositories
  fullName: Toscana.ToscaServiceTemplate.Repositories
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Repositories
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 56
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDeclares the list of external repositories which contain artifacts that are referenced in the service template \nalong with their addresses and necessary credential information used to connect to them in order to retrieve the artifacts.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaRepository> Repositories { get; set; }
    content.vb: Public Property Repositories As Dictionary(Of String, ToscaRepository)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRepository}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.Imports
  commentId: P:Toscana.ToscaServiceTemplate.Imports
  id: Imports
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Imports
  nameWithType: ToscaServiceTemplate.Imports
  fullName: Toscana.ToscaServiceTemplate.Imports
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Imports
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 62
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDeclares import statements external TOSCA Definitions documents. \nFor example, these may be file location or URIs relative to the service template file within the same TOSCA CSAR file.\n"
  example: []
  syntax:
    content: public List<Dictionary<string, ToscaImport>> Imports { get; set; }
    content.vb: Public Property Imports As List(Of Dictionary(Of String, ToscaImport))
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Toscana.ToscaImport}}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.ArtifactTypes
  commentId: P:Toscana.ToscaServiceTemplate.ArtifactTypes
  id: ArtifactTypes
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: ArtifactTypes
  nameWithType: ToscaServiceTemplate.ArtifactTypes
  fullName: Toscana.ToscaServiceTemplate.ArtifactTypes
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ArtifactTypes
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 67
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nThis section contains an optional list of artifact type definitions for use in the service template\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaArtifactType> ArtifactTypes { get; set; }
    content.vb: Public Property ArtifactTypes As Dictionary(Of String, ToscaArtifactType)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaArtifactType}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.CapabilityTypes
  commentId: P:Toscana.ToscaServiceTemplate.CapabilityTypes
  id: CapabilityTypes
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: CapabilityTypes
  nameWithType: ToscaServiceTemplate.CapabilityTypes
  fullName: Toscana.ToscaServiceTemplate.CapabilityTypes
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: CapabilityTypes
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 72
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nThis section contains an optional list of capability type definitions for use in the service template\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaCapabilityType> CapabilityTypes { get; set; }
    content.vb: Public Property CapabilityTypes As Dictionary(Of String, ToscaCapabilityType)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapabilityType}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.TopologyTemplate
  commentId: P:Toscana.ToscaServiceTemplate.TopologyTemplate
  id: TopologyTemplate
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: TopologyTemplate
  nameWithType: ToscaServiceTemplate.TopologyTemplate
  fullName: Toscana.ToscaServiceTemplate.TopologyTemplate
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: TopologyTemplate
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 78
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDefines the topology template of an application or service, consisting of node templates that represent \nthe application’s or service’s components, as well as relationship templates representing relations between the components.\n"
  example: []
  syntax:
    content: public ToscaTopologyTemplate TopologyTemplate { get; set; }
    content.vb: Public Property TopologyTemplate As ToscaTopologyTemplate
    parameters: []
    return:
      type: Toscana.ToscaTopologyTemplate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.NodeTypes
  commentId: P:Toscana.ToscaServiceTemplate.NodeTypes
  id: NodeTypes
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: NodeTypes
  nameWithType: ToscaServiceTemplate.NodeTypes
  fullName: Toscana.ToscaServiceTemplate.NodeTypes
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: NodeTypes
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 83
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nThis section contains a set of node type definitions for use in the service template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaNodeType> NodeTypes { get; set; }
    content.vb: Public Property NodeTypes As Dictionary(Of String, ToscaNodeType)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeType}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.RelationshipTypes
  commentId: P:Toscana.ToscaServiceTemplate.RelationshipTypes
  id: RelationshipTypes
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: RelationshipTypes
  nameWithType: ToscaServiceTemplate.RelationshipTypes
  fullName: Toscana.ToscaServiceTemplate.RelationshipTypes
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: RelationshipTypes
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 88
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nThis section contains a set of relationship type definitions for use in the service template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaRelationshipType> RelationshipTypes { get; set; }
    content.vb: Public Property RelationshipTypes As Dictionary(Of String, ToscaRelationshipType)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRelationshipType}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.DataTypes
  commentId: P:Toscana.ToscaServiceTemplate.DataTypes
  id: DataTypes
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: DataTypes
  nameWithType: ToscaServiceTemplate.DataTypes
  fullName: Toscana.ToscaServiceTemplate.DataTypes
  type: Property
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: DataTypes
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 93
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDeclares a list of optional TOSCA Data Type definitions.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaDataType> DataTypes { get; set; }
    content.vb: Public Property DataTypes As Dictionary(Of String, ToscaDataType)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaDataType}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.Load(System.IO.Stream)
  commentId: M:Toscana.ToscaServiceTemplate.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Load(Stream)
  nameWithType: ToscaServiceTemplate.Load(Stream)
  fullName: Toscana.ToscaServiceTemplate.Load(System.IO.Stream)
  type: Method
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Load
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 101
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nParses stream of TOSCA YAML file into an instance of ToscaServiceTemplate class\n"
  example: []
  syntax:
    content: public static ToscaServiceTemplate Load(Stream stream)
    content.vb: Public Shared Function Load(stream As Stream) As ToscaServiceTemplate
    parameters:
    - id: stream
      type: System.IO.Stream
      description: Stream of TOSCA YAML file
    return:
      type: Toscana.ToscaServiceTemplate
      description: Valid instance of ToscaServiceTemplate
  exceptions:
  - type: Toscana.Exceptions.ToscaParsingException
    commentId: T:Toscana.Exceptions.ToscaParsingException
    description: Thrown when YAML is not valid
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Toscana.ToscaServiceTemplate.Load(System.String)
  commentId: M:Toscana.ToscaServiceTemplate.Load(System.String)
  id: Load(System.String)
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Load(String)
  nameWithType: ToscaServiceTemplate.Load(String)
  fullName: Toscana.ToscaServiceTemplate.Load(System.String)
  type: Method
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Load
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 113
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nParses stream of TOSCA YAML file into an instance of ToscaServiceTemplate class\n"
  example: []
  syntax:
    content: public static ToscaServiceTemplate Load(string filePath)
    content.vb: Public Shared Function Load(filePath As String) As ToscaServiceTemplate
    parameters:
    - id: filePath
      type: System.String
      description: Path to the file
    return:
      type: Toscana.ToscaServiceTemplate
      description: Valid instance of ToscaServiceTemplate
  exceptions:
  - type: Toscana.Exceptions.ToscaParsingException
    commentId: T:Toscana.Exceptions.ToscaParsingException
    description: Thrown when file is not valid according to YAML or TOSCA
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Toscana.ToscaServiceTemplate.Save(System.IO.Stream)
  commentId: M:Toscana.ToscaServiceTemplate.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Save(Stream)
  nameWithType: ToscaServiceTemplate.Save(Stream)
  fullName: Toscana.ToscaServiceTemplate.Save(System.IO.Stream)
  type: Method
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Save
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 123
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nSaves the ServiceTemplate to provided stream\n"
  example: []
  syntax:
    content: public void Save(Stream stream)
    content.vb: Public Sub Save(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: Stream to save
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaServiceTemplate.Save(System.String)
  commentId: M:Toscana.ToscaServiceTemplate.Save(System.String)
  id: Save(System.String)
  parent: Toscana.ToscaServiceTemplate
  langs:
  - csharp
  - vb
  name: Save(String)
  nameWithType: ToscaServiceTemplate.Save(String)
  fullName: Toscana.ToscaServiceTemplate.Save(System.String)
  type: Method
  source:
    remote:
      path: Toscana/ToscaServiceTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Save
    path: Toscana/ToscaServiceTemplate.cs
    startLine: 133
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nSaves the instance of ToscaServiceTemplate to specified file\n"
  example: []
  syntax:
    content: public void Save(string path)
    content.vb: Public Sub Save(path As String)
    parameters:
    - id: path
      type: System.String
      description: File path to save
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Toscana
  commentId: N:Toscana
  isExternal: false
  name: Toscana
  nameWithType: Toscana
  fullName: Toscana
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaServiceTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaServiceTemplate,Toscana.ToscaServiceTemplate},System.Func{Toscana.ToscaServiceTemplate,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  name: FromHierarchy<ToscaServiceTemplate>(Func<ToscaServiceTemplate, ToscaServiceTemplate>, Func<ToscaServiceTemplate, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaServiceTemplate>(Func<ToscaServiceTemplate, ToscaServiceTemplate>, Func<ToscaServiceTemplate, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaServiceTemplate>(System.Func<Toscana.ToscaServiceTemplate, Toscana.ToscaServiceTemplate>, System.Func<Toscana.ToscaServiceTemplate, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaServiceTemplate)(Func(Of ToscaServiceTemplate, ToscaServiceTemplate), Func(Of ToscaServiceTemplate, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaServiceTemplate)(System.Func(Of Toscana.ToscaServiceTemplate, Toscana.ToscaServiceTemplate), System.Func(Of Toscana.ToscaServiceTemplate, System.Boolean))
  name.vb: FromHierarchy(Of ToscaServiceTemplate)(Func(Of ToscaServiceTemplate, ToscaServiceTemplate), Func(Of ToscaServiceTemplate, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<ToscaServiceTemplate>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaServiceTemplate>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaServiceTemplate>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of ToscaServiceTemplate)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaServiceTemplate)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaServiceTemplate)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaServiceTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaServiceTemplate,Toscana.ToscaServiceTemplate})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  name: FromHierarchy<ToscaServiceTemplate>(Func<ToscaServiceTemplate, ToscaServiceTemplate>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaServiceTemplate>(Func<ToscaServiceTemplate, ToscaServiceTemplate>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaServiceTemplate>(System.Func<Toscana.ToscaServiceTemplate, Toscana.ToscaServiceTemplate>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaServiceTemplate)(Func(Of ToscaServiceTemplate, ToscaServiceTemplate))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaServiceTemplate)(System.Func(Of Toscana.ToscaServiceTemplate, Toscana.ToscaServiceTemplate))
  name.vb: FromHierarchy(Of ToscaServiceTemplate)(Func(Of ToscaServiceTemplate, ToscaServiceTemplate))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy<ToscaServiceTemplate>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaServiceTemplate>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaServiceTemplate>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy(Of ToscaServiceTemplate)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaServiceTemplate)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaServiceTemplate)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaServiceTemplate
    name: ToscaServiceTemplate
    nameWithType: ToscaServiceTemplate
    fullName: Toscana.ToscaServiceTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions
  commentId: T:Toscana.Common.EnumerableExtensions
  parent: Toscana.Common
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Toscana.Common.EnumerableExtensions
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common
  commentId: N:Toscana.Common
  isExternal: false
  name: Toscana.Common
  nameWithType: Toscana.Common
  fullName: Toscana.Common
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Toscana.ToscaServiceTemplateMetadata
  commentId: T:Toscana.ToscaServiceTemplateMetadata
  parent: Toscana
  isExternal: false
  name: ToscaServiceTemplateMetadata
  nameWithType: ToscaServiceTemplateMetadata
  fullName: Toscana.ToscaServiceTemplateMetadata
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRepository}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRepository}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaRepository>
  nameWithType: Dictionary<String, ToscaRepository>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaRepository>
  nameWithType.vb: Dictionary(Of String, ToscaRepository)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaRepository)
  name.vb: Dictionary(Of String, ToscaRepository)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRepository
    name: ToscaRepository
    nameWithType: ToscaRepository
    fullName: Toscana.ToscaRepository
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRepository
    name: ToscaRepository
    nameWithType: ToscaRepository
    fullName: Toscana.ToscaRepository
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Toscana.ToscaImport}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Toscana.ToscaImport}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Dictionary<String, ToscaImport>>
  nameWithType: List<Dictionary<String, ToscaImport>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.Dictionary<System.String, Toscana.ToscaImport>>
  nameWithType.vb: List(Of Dictionary(Of String, ToscaImport))
  fullname.vb: System.Collections.Generic.List(Of System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaImport))
  name.vb: List(Of Dictionary(Of String, ToscaImport))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaImport
    name: ToscaImport
    nameWithType: ToscaImport
    fullName: Toscana.ToscaImport
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaImport
    name: ToscaImport
    nameWithType: ToscaImport
    fullName: Toscana.ToscaImport
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaArtifactType}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaArtifactType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaArtifactType>
  nameWithType: Dictionary<String, ToscaArtifactType>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaArtifactType>
  nameWithType.vb: Dictionary(Of String, ToscaArtifactType)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaArtifactType)
  name.vb: Dictionary(Of String, ToscaArtifactType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaArtifactType
    name: ToscaArtifactType
    nameWithType: ToscaArtifactType
    fullName: Toscana.ToscaArtifactType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaArtifactType
    name: ToscaArtifactType
    nameWithType: ToscaArtifactType
    fullName: Toscana.ToscaArtifactType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapabilityType}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapabilityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaCapabilityType>
  nameWithType: Dictionary<String, ToscaCapabilityType>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaCapabilityType>
  nameWithType.vb: Dictionary(Of String, ToscaCapabilityType)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaCapabilityType)
  name.vb: Dictionary(Of String, ToscaCapabilityType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaCapabilityType
    name: ToscaCapabilityType
    nameWithType: ToscaCapabilityType
    fullName: Toscana.ToscaCapabilityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaCapabilityType
    name: ToscaCapabilityType
    nameWithType: ToscaCapabilityType
    fullName: Toscana.ToscaCapabilityType
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaTopologyTemplate
  commentId: T:Toscana.ToscaTopologyTemplate
  parent: Toscana
  isExternal: false
  name: ToscaTopologyTemplate
  nameWithType: ToscaTopologyTemplate
  fullName: Toscana.ToscaTopologyTemplate
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeType}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaNodeType>
  nameWithType: Dictionary<String, ToscaNodeType>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaNodeType>
  nameWithType.vb: Dictionary(Of String, ToscaNodeType)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaNodeType)
  name.vb: Dictionary(Of String, ToscaNodeType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRelationshipType}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRelationshipType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaRelationshipType>
  nameWithType: Dictionary<String, ToscaRelationshipType>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaRelationshipType>
  nameWithType.vb: Dictionary(Of String, ToscaRelationshipType)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaRelationshipType)
  name.vb: Dictionary(Of String, ToscaRelationshipType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRelationshipType
    name: ToscaRelationshipType
    nameWithType: ToscaRelationshipType
    fullName: Toscana.ToscaRelationshipType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRelationshipType
    name: ToscaRelationshipType
    nameWithType: ToscaRelationshipType
    fullName: Toscana.ToscaRelationshipType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaDataType}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaDataType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaDataType>
  nameWithType: Dictionary<String, ToscaDataType>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaDataType>
  nameWithType.vb: Dictionary(Of String, ToscaDataType)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaDataType)
  name.vb: Dictionary(Of String, ToscaDataType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaDataType
    name: ToscaDataType
    nameWithType: ToscaDataType
    fullName: Toscana.ToscaDataType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaDataType
    name: ToscaDataType
    nameWithType: ToscaDataType
    fullName: Toscana.ToscaDataType
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Exceptions.ToscaParsingException
  commentId: T:Toscana.Exceptions.ToscaParsingException
  isExternal: false
  name: ToscaParsingException
  nameWithType: ToscaParsingException
  fullName: Toscana.Exceptions.ToscaParsingException
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Toscana.ToscaServiceTemplate
  commentId: T:Toscana.ToscaServiceTemplate
  parent: Toscana
  isExternal: false
  name: ToscaServiceTemplate
  nameWithType: ToscaServiceTemplate
  fullName: Toscana.ToscaServiceTemplate
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
