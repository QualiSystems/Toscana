### YamlMime:ManagedReference
items:
- uid: Toscana.ToscaTopologyTemplate
  commentId: T:Toscana.ToscaTopologyTemplate
  id: ToscaTopologyTemplate
  parent: Toscana
  children:
  - Toscana.ToscaTopologyTemplate.#ctor
  - Toscana.ToscaTopologyTemplate.Description
  - Toscana.ToscaTopologyTemplate.Groups
  - Toscana.ToscaTopologyTemplate.Inputs
  - Toscana.ToscaTopologyTemplate.NodeTemplates
  - Toscana.ToscaTopologyTemplate.Outputs
  - Toscana.ToscaTopologyTemplate.Policies
  - Toscana.ToscaTopologyTemplate.RelationshipTemplates
  - Toscana.ToscaTopologyTemplate.SubstitutionMappings
  langs:
  - csharp
  - vb
  name: ToscaTopologyTemplate
  nameWithType: ToscaTopologyTemplate
  fullName: Toscana.ToscaTopologyTemplate
  type: Class
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaTopologyTemplate
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 9
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nA Topology Template defines the structure of a service in the context of a Service Template. \nA Topology Template consists of a set of Node Template and Relationship Template definitions \nthat together define the topology model of a service as a (not necessarily connected) directed graph.\n"
  example: []
  syntax:
    content: public class ToscaTopologyTemplate
    content.vb: Public Class ToscaTopologyTemplate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate},System.Func{Toscana.ToscaTopologyTemplate,System.Boolean})
  - Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Toscana.ToscaTopologyTemplate.#ctor
  commentId: M:Toscana.ToscaTopologyTemplate.#ctor
  id: '#ctor'
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: ToscaTopologyTemplate()
  nameWithType: ToscaTopologyTemplate.ToscaTopologyTemplate()
  fullName: Toscana.ToscaTopologyTemplate.ToscaTopologyTemplate()
  type: Constructor
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: .ctor
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 14
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nInitializes an instance of ToscaTopologyTemplate\n"
  example: []
  syntax:
    content: public ToscaTopologyTemplate()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.Description
  commentId: P:Toscana.ToscaTopologyTemplate.Description
  id: Description
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ToscaTopologyTemplate.Description
  fullName: Toscana.ToscaTopologyTemplate.Description
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Description
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 24
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nThe optional description for the Topology Template.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    content.vb: Public Property Description As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.Inputs
  commentId: P:Toscana.ToscaTopologyTemplate.Inputs
  id: Inputs
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: Inputs
  nameWithType: ToscaTopologyTemplate.Inputs
  fullName: Toscana.ToscaTopologyTemplate.Inputs
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Inputs
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 29
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of input parameters (i.e., as parameter definitions) for the Topology Template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaParameter> Inputs { get; set; }
    content.vb: Public Property Inputs As Dictionary(Of String, ToscaParameter)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaParameter}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.NodeTemplates
  commentId: P:Toscana.ToscaTopologyTemplate.NodeTemplates
  id: NodeTemplates
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: NodeTemplates
  nameWithType: ToscaTopologyTemplate.NodeTemplates
  fullName: Toscana.ToscaTopologyTemplate.NodeTemplates
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: NodeTemplates
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 34
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of node template definitions for the Topology Template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaNodeTemplate> NodeTemplates { get; set; }
    content.vb: Public Property NodeTemplates As Dictionary(Of String, ToscaNodeTemplate)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeTemplate}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.RelationshipTemplates
  commentId: P:Toscana.ToscaTopologyTemplate.RelationshipTemplates
  id: RelationshipTemplates
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: RelationshipTemplates
  nameWithType: ToscaTopologyTemplate.RelationshipTemplates
  fullName: Toscana.ToscaTopologyTemplate.RelationshipTemplates
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: RelationshipTemplates
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 39
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of relationship templates for the Topology Template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaRelationshipTemplate> RelationshipTemplates { get; set; }
    content.vb: Public Property RelationshipTemplates As Dictionary(Of String, ToscaRelationshipTemplate)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRelationshipTemplate}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.Groups
  commentId: P:Toscana.ToscaTopologyTemplate.Groups
  id: Groups
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: Groups
  nameWithType: ToscaTopologyTemplate.Groups
  fullName: Toscana.ToscaTopologyTemplate.Groups
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Groups
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 44
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of Group definitions whose members are node templates defined within this same Topology Template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaGroup> Groups { get; set; }
    content.vb: Public Property Groups As Dictionary(Of String, ToscaGroup)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaGroup}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.Policies
  commentId: P:Toscana.ToscaTopologyTemplate.Policies
  id: Policies
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: Policies
  nameWithType: ToscaTopologyTemplate.Policies
  fullName: Toscana.ToscaTopologyTemplate.Policies
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Policies
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 49
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of Policy definitions for the Topology Template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaPolicy> Policies { get; set; }
    content.vb: Public Property Policies As Dictionary(Of String, ToscaPolicy)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaPolicy}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.Outputs
  commentId: P:Toscana.ToscaTopologyTemplate.Outputs
  id: Outputs
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: Outputs
  nameWithType: ToscaTopologyTemplate.Outputs
  fullName: Toscana.ToscaTopologyTemplate.Outputs
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Outputs
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 54
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of output parameters (i.e., as parameter definitions) for the Topology Template.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaParameter> Outputs { get; set; }
    content.vb: Public Property Outputs As Dictionary(Of String, ToscaParameter)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaParameter}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.SubstitutionMappings
  commentId: P:Toscana.ToscaTopologyTemplate.SubstitutionMappings
  id: SubstitutionMappings
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: SubstitutionMappings
  nameWithType: ToscaTopologyTemplate.SubstitutionMappings
  fullName: Toscana.ToscaTopologyTemplate.SubstitutionMappings
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: develop
      repo: https://github.com/QualiSystems/Toscana.git
    id: SubstitutionMappings
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 61
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional declaration that exports the topology template as an implementation of a Node type. \nThis also includes the mappings between the external Node Types named capabilities and requirements \nto existing implementations of those capabilities and requirements on Node templates declared within the topology template.\n"
  example: []
  syntax:
    content: public object SubstitutionMappings { get; set; }
    content.vb: Public Property SubstitutionMappings As Object
    parameters: []
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Toscana
  commentId: N:Toscana
  isExternal: false
  name: Toscana
  nameWithType: Toscana
  fullName: Toscana
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate},System.Func{Toscana.ToscaTopologyTemplate,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  name: FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>, Func<ToscaTopologyTemplate, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>, Func<ToscaTopologyTemplate, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>(System.Func<Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate>, System.Func<Toscana.ToscaTopologyTemplate, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate), Func(Of ToscaTopologyTemplate, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)(System.Func(Of Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate), System.Func(Of Toscana.ToscaTopologyTemplate, System.Boolean))
  name.vb: FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate), Func(Of ToscaTopologyTemplate, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<ToscaTopologyTemplate>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of ToscaTopologyTemplate)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  name: FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>(System.Func<Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)(System.Func(Of Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate))
  name.vb: FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy<ToscaTopologyTemplate>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy(Of ToscaTopologyTemplate)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions
  commentId: T:Toscana.Common.EnumerableExtensions
  parent: Toscana.Common
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Toscana.Common.EnumerableExtensions
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common
  commentId: N:Toscana.Common
  isExternal: false
  name: Toscana.Common
  nameWithType: Toscana.Common
  fullName: Toscana.Common
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaParameter}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaParameter>
  nameWithType: Dictionary<String, ToscaParameter>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaParameter>
  nameWithType.vb: Dictionary(Of String, ToscaParameter)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaParameter)
  name.vb: Dictionary(Of String, ToscaParameter)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaParameter
    name: ToscaParameter
    nameWithType: ToscaParameter
    fullName: Toscana.ToscaParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaParameter
    name: ToscaParameter
    nameWithType: ToscaParameter
    fullName: Toscana.ToscaParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeTemplate}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeTemplate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaNodeTemplate>
  nameWithType: Dictionary<String, ToscaNodeTemplate>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaNodeTemplate>
  nameWithType.vb: Dictionary(Of String, ToscaNodeTemplate)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaNodeTemplate)
  name.vb: Dictionary(Of String, ToscaNodeTemplate)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeTemplate
    name: ToscaNodeTemplate
    nameWithType: ToscaNodeTemplate
    fullName: Toscana.ToscaNodeTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeTemplate
    name: ToscaNodeTemplate
    nameWithType: ToscaNodeTemplate
    fullName: Toscana.ToscaNodeTemplate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRelationshipTemplate}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRelationshipTemplate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaRelationshipTemplate>
  nameWithType: Dictionary<String, ToscaRelationshipTemplate>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaRelationshipTemplate>
  nameWithType.vb: Dictionary(Of String, ToscaRelationshipTemplate)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaRelationshipTemplate)
  name.vb: Dictionary(Of String, ToscaRelationshipTemplate)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRelationshipTemplate
    name: ToscaRelationshipTemplate
    nameWithType: ToscaRelationshipTemplate
    fullName: Toscana.ToscaRelationshipTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRelationshipTemplate
    name: ToscaRelationshipTemplate
    nameWithType: ToscaRelationshipTemplate
    fullName: Toscana.ToscaRelationshipTemplate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaGroup}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaGroup>
  nameWithType: Dictionary<String, ToscaGroup>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaGroup>
  nameWithType.vb: Dictionary(Of String, ToscaGroup)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaGroup)
  name.vb: Dictionary(Of String, ToscaGroup)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaGroup
    name: ToscaGroup
    nameWithType: ToscaGroup
    fullName: Toscana.ToscaGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaGroup
    name: ToscaGroup
    nameWithType: ToscaGroup
    fullName: Toscana.ToscaGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaPolicy}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaPolicy}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaPolicy>
  nameWithType: Dictionary<String, ToscaPolicy>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaPolicy>
  nameWithType.vb: Dictionary(Of String, ToscaPolicy)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaPolicy)
  name.vb: Dictionary(Of String, ToscaPolicy)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: )
    nameWithType: )
    fullName: )
