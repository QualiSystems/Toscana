### YamlMime:ManagedReference
items:
- uid: Toscana.ToscaTopologyTemplate
  commentId: T:Toscana.ToscaTopologyTemplate
  id: ToscaTopologyTemplate
  parent: Toscana
  children:
  - Toscana.ToscaTopologyTemplate.#ctor
  - Toscana.ToscaTopologyTemplate.Inputs
  - Toscana.ToscaTopologyTemplate.NodeTemplates
  - Toscana.ToscaTopologyTemplate.Outputs
  langs:
  - csharp
  - vb
  name: ToscaTopologyTemplate
  nameWithType: ToscaTopologyTemplate
  fullName: Toscana.ToscaTopologyTemplate
  type: Class
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaTopologyTemplate
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 4
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public class ToscaTopologyTemplate
    content.vb: Public Class ToscaTopologyTemplate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate},System.Func{Toscana.ToscaTopologyTemplate,System.Boolean})
  - Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Toscana.ToscaTopologyTemplate.#ctor
  commentId: M:Toscana.ToscaTopologyTemplate.#ctor
  id: '#ctor'
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: ToscaTopologyTemplate()
  nameWithType: ToscaTopologyTemplate.ToscaTopologyTemplate()
  fullName: Toscana.ToscaTopologyTemplate.ToscaTopologyTemplate()
  type: Constructor
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: .ctor
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 6
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public ToscaTopologyTemplate()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.NodeTemplates
  commentId: P:Toscana.ToscaTopologyTemplate.NodeTemplates
  id: NodeTemplates
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: NodeTemplates
  nameWithType: ToscaTopologyTemplate.NodeTemplates
  fullName: Toscana.ToscaTopologyTemplate.NodeTemplates
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: NodeTemplates
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 13
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public Dictionary<string, ToscaNodeTemplate> NodeTemplates { get; set; }
    content.vb: Public Property NodeTemplates As Dictionary(Of String, ToscaNodeTemplate)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeTemplate}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.Inputs
  commentId: P:Toscana.ToscaTopologyTemplate.Inputs
  id: Inputs
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: Inputs
  nameWithType: ToscaTopologyTemplate.Inputs
  fullName: Toscana.ToscaTopologyTemplate.Inputs
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Inputs
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 15
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public Dictionary<string, ToscaTopologyInput> Inputs { get; set; }
    content.vb: Public Property Inputs As Dictionary(Of String, ToscaTopologyInput)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaTopologyInput}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaTopologyTemplate.Outputs
  commentId: P:Toscana.ToscaTopologyTemplate.Outputs
  id: Outputs
  parent: Toscana.ToscaTopologyTemplate
  langs:
  - csharp
  - vb
  name: Outputs
  nameWithType: ToscaTopologyTemplate.Outputs
  fullName: Toscana.ToscaTopologyTemplate.Outputs
  type: Property
  source:
    remote:
      path: Toscana/ToscaTopologyTemplate.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Outputs
    path: Toscana/ToscaTopologyTemplate.cs
    startLine: 17
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public Dictionary<string, ToscaTopologyOutput> Outputs { get; set; }
    content.vb: Public Property Outputs As Dictionary(Of String, ToscaTopologyOutput)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaTopologyOutput}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Toscana
  commentId: N:Toscana
  isExternal: false
  name: Toscana
  nameWithType: Toscana
  fullName: Toscana
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate},System.Func{Toscana.ToscaTopologyTemplate,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  name: FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>, Func<ToscaTopologyTemplate, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>, Func<ToscaTopologyTemplate, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>(System.Func<Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate>, System.Func<Toscana.ToscaTopologyTemplate, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate), Func(Of ToscaTopologyTemplate, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)(System.Func(Of Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate), System.Func(Of Toscana.ToscaTopologyTemplate, System.Boolean))
  name.vb: FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate), Func(Of ToscaTopologyTemplate, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<ToscaTopologyTemplate>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of ToscaTopologyTemplate)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaTopologyTemplate.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaTopologyTemplate,Toscana.ToscaTopologyTemplate})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  name: FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>(Func<ToscaTopologyTemplate, ToscaTopologyTemplate>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>(System.Func<Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)(System.Func(Of Toscana.ToscaTopologyTemplate, Toscana.ToscaTopologyTemplate))
  name.vb: FromHierarchy(Of ToscaTopologyTemplate)(Func(Of ToscaTopologyTemplate, ToscaTopologyTemplate))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy<ToscaTopologyTemplate>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaTopologyTemplate>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaTopologyTemplate>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy(Of ToscaTopologyTemplate)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaTopologyTemplate)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaTopologyTemplate)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyTemplate
    name: ToscaTopologyTemplate
    nameWithType: ToscaTopologyTemplate
    fullName: Toscana.ToscaTopologyTemplate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions
  commentId: T:Toscana.Common.EnumerableExtensions
  parent: Toscana.Common
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Toscana.Common.EnumerableExtensions
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common
  commentId: N:Toscana.Common
  isExternal: false
  name: Toscana.Common
  nameWithType: Toscana.Common
  fullName: Toscana.Common
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeTemplate}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaNodeTemplate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaNodeTemplate>
  nameWithType: Dictionary<String, ToscaNodeTemplate>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaNodeTemplate>
  nameWithType.vb: Dictionary(Of String, ToscaNodeTemplate)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaNodeTemplate)
  name.vb: Dictionary(Of String, ToscaNodeTemplate)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeTemplate
    name: ToscaNodeTemplate
    nameWithType: ToscaNodeTemplate
    fullName: Toscana.ToscaNodeTemplate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeTemplate
    name: ToscaNodeTemplate
    nameWithType: ToscaNodeTemplate
    fullName: Toscana.ToscaNodeTemplate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaTopologyInput}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaTopologyInput}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaTopologyInput>
  nameWithType: Dictionary<String, ToscaTopologyInput>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaTopologyInput>
  nameWithType.vb: Dictionary(Of String, ToscaTopologyInput)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaTopologyInput)
  name.vb: Dictionary(Of String, ToscaTopologyInput)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyInput
    name: ToscaTopologyInput
    nameWithType: ToscaTopologyInput
    fullName: Toscana.ToscaTopologyInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyInput
    name: ToscaTopologyInput
    nameWithType: ToscaTopologyInput
    fullName: Toscana.ToscaTopologyInput
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaTopologyOutput}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaTopologyOutput}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaTopologyOutput>
  nameWithType: Dictionary<String, ToscaTopologyOutput>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaTopologyOutput>
  nameWithType.vb: Dictionary(Of String, ToscaTopologyOutput)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaTopologyOutput)
  name.vb: Dictionary(Of String, ToscaTopologyOutput)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyOutput
    name: ToscaTopologyOutput
    nameWithType: ToscaTopologyOutput
    fullName: Toscana.ToscaTopologyOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaTopologyOutput
    name: ToscaTopologyOutput
    nameWithType: ToscaTopologyOutput
    fullName: Toscana.ToscaTopologyOutput
  - name: )
    nameWithType: )
    fullName: )
