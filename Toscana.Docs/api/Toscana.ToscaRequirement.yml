### YamlMime:ManagedReference
items:
- uid: Toscana.ToscaRequirement
  commentId: T:Toscana.ToscaRequirement
  id: ToscaRequirement
  parent: Toscana
  children:
  - Toscana.ToscaRequirement.Capability
  - Toscana.ToscaRequirement.Node
  - Toscana.ToscaRequirement.Occurrences
  - Toscana.ToscaRequirement.op_Implicit(System.String)~Toscana.ToscaRequirement
  - Toscana.ToscaRequirement.Relationship
  langs:
  - csharp
  - vb
  name: ToscaRequirement
  nameWithType: ToscaRequirement
  fullName: Toscana.ToscaRequirement
  type: Class
  source:
    remote:
      path: Toscana/ToscaRequirement.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaRequirement
    path: Toscana/ToscaRequirement.cs
    startLine: 4
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public class ToscaRequirement
    content.vb: Public Class ToscaRequirement
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Toscana.ToscaRequirement.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaRequirement,Toscana.ToscaRequirement},System.Func{Toscana.ToscaRequirement,System.Boolean})
  - Toscana.ToscaRequirement.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaRequirement,Toscana.ToscaRequirement})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Toscana.ToscaRequirement.Capability
  commentId: P:Toscana.ToscaRequirement.Capability
  id: Capability
  parent: Toscana.ToscaRequirement
  langs:
  - csharp
  - vb
  name: Capability
  nameWithType: ToscaRequirement.Capability
  fullName: Toscana.ToscaRequirement.Capability
  type: Property
  source:
    remote:
      path: Toscana/ToscaRequirement.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Capability
    path: Toscana/ToscaRequirement.cs
    startLine: 6
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: >-
      [Required(ErrorMessage = "capability is required on requirement")]

      public string Capability { get; set; }
    content.vb: >-
      <Required(ErrorMessage:="capability is required on requirement")>

      Public Property Capability As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: capability is required on requirement
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaRequirement.Node
  commentId: P:Toscana.ToscaRequirement.Node
  id: Node
  parent: Toscana.ToscaRequirement
  langs:
  - csharp
  - vb
  name: Node
  nameWithType: ToscaRequirement.Node
  fullName: Toscana.ToscaRequirement.Node
  type: Property
  source:
    remote:
      path: Toscana/ToscaRequirement.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Node
    path: Toscana/ToscaRequirement.cs
    startLine: 8
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public string Node { get; set; }
    content.vb: Public Property Node As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaRequirement.Relationship
  commentId: P:Toscana.ToscaRequirement.Relationship
  id: Relationship
  parent: Toscana.ToscaRequirement
  langs:
  - csharp
  - vb
  name: Relationship
  nameWithType: ToscaRequirement.Relationship
  fullName: Toscana.ToscaRequirement.Relationship
  type: Property
  source:
    remote:
      path: Toscana/ToscaRequirement.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Relationship
    path: Toscana/ToscaRequirement.cs
    startLine: 9
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public string Relationship { get; set; }
    content.vb: Public Property Relationship As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaRequirement.Occurrences
  commentId: P:Toscana.ToscaRequirement.Occurrences
  id: Occurrences
  parent: Toscana.ToscaRequirement
  langs:
  - csharp
  - vb
  name: Occurrences
  nameWithType: ToscaRequirement.Occurrences
  fullName: Toscana.ToscaRequirement.Occurrences
  type: Property
  source:
    remote:
      path: Toscana/ToscaRequirement.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Occurrences
    path: Toscana/ToscaRequirement.cs
    startLine: 10
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public object[] Occurrences { get; set; }
    content.vb: Public Property Occurrences As Object()
    parameters: []
    return:
      type: System.Object[]
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaRequirement.op_Implicit(System.String)~Toscana.ToscaRequirement
  commentId: M:Toscana.ToscaRequirement.op_Implicit(System.String)~Toscana.ToscaRequirement
  id: op_Implicit(System.String)~Toscana.ToscaRequirement
  parent: Toscana.ToscaRequirement
  langs:
  - csharp
  - vb
  name: Implicit(String to ToscaRequirement)
  nameWithType: ToscaRequirement.Implicit(String to ToscaRequirement)
  fullName: Toscana.ToscaRequirement.Implicit(System.String to Toscana.ToscaRequirement)
  type: Operator
  source:
    remote:
      path: Toscana/ToscaRequirement.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: op_Implicit
    path: Toscana/ToscaRequirement.cs
    startLine: 12
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: public static implicit operator ToscaRequirement(string val)
    content.vb: Public Shared Widening Operator CType(val As String) As ToscaRequirement
    parameters:
    - id: val
      type: System.String
    return:
      type: Toscana.ToscaRequirement
  nameWithType.vb: ToscaRequirement.Widening(String to ToscaRequirement)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Toscana.ToscaRequirement.Widening(System.String to Toscana.ToscaRequirement)
  name.vb: Widening(String to ToscaRequirement)
references:
- uid: Toscana
  commentId: N:Toscana
  isExternal: false
  name: Toscana
  nameWithType: Toscana
  fullName: Toscana
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaRequirement.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaRequirement,Toscana.ToscaRequirement},System.Func{Toscana.ToscaRequirement,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  name: FromHierarchy<ToscaRequirement>(Func<ToscaRequirement, ToscaRequirement>, Func<ToscaRequirement, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaRequirement>(Func<ToscaRequirement, ToscaRequirement>, Func<ToscaRequirement, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaRequirement>(System.Func<Toscana.ToscaRequirement, Toscana.ToscaRequirement>, System.Func<Toscana.ToscaRequirement, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaRequirement)(Func(Of ToscaRequirement, ToscaRequirement), Func(Of ToscaRequirement, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaRequirement)(System.Func(Of Toscana.ToscaRequirement, Toscana.ToscaRequirement), System.Func(Of Toscana.ToscaRequirement, System.Boolean))
  name.vb: FromHierarchy(Of ToscaRequirement)(Func(Of ToscaRequirement, ToscaRequirement), Func(Of ToscaRequirement, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<ToscaRequirement>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaRequirement>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaRequirement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of ToscaRequirement)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaRequirement)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaRequirement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaRequirement.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaRequirement,Toscana.ToscaRequirement})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  name: FromHierarchy<ToscaRequirement>(Func<ToscaRequirement, ToscaRequirement>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaRequirement>(Func<ToscaRequirement, ToscaRequirement>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaRequirement>(System.Func<Toscana.ToscaRequirement, Toscana.ToscaRequirement>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaRequirement)(Func(Of ToscaRequirement, ToscaRequirement))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaRequirement)(System.Func(Of Toscana.ToscaRequirement, Toscana.ToscaRequirement))
  name.vb: FromHierarchy(Of ToscaRequirement)(Func(Of ToscaRequirement, ToscaRequirement))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy<ToscaRequirement>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaRequirement>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaRequirement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy(Of ToscaRequirement)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaRequirement)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaRequirement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions
  commentId: T:Toscana.Common.EnumerableExtensions
  parent: Toscana.Common
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Toscana.Common.EnumerableExtensions
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common
  commentId: N:Toscana.Common
  isExternal: false
  name: Toscana.Common
  nameWithType: Toscana.Common
  fullName: Toscana.Common
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Toscana.ToscaRequirement
  commentId: T:Toscana.ToscaRequirement
  parent: Toscana
  isExternal: false
  name: ToscaRequirement
  nameWithType: ToscaRequirement
  fullName: Toscana.ToscaRequirement
