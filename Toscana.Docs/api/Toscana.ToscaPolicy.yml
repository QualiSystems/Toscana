### YamlMime:ManagedReference
items:
- uid: Toscana.ToscaPolicy
  commentId: T:Toscana.ToscaPolicy
  id: ToscaPolicy
  parent: Toscana
  children:
  - Toscana.ToscaPolicy.#ctor
  - Toscana.ToscaPolicy.Description
  - Toscana.ToscaPolicy.Properties
  - Toscana.ToscaPolicy.Targets
  - Toscana.ToscaPolicy.Type
  langs:
  - csharp
  - vb
  name: ToscaPolicy
  nameWithType: ToscaPolicy
  fullName: Toscana.ToscaPolicy
  type: Class
  source:
    remote:
      path: Toscana/ToscaPolicy.cs
      branch: feature/borismod_loop
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaPolicy
    path: Toscana/ToscaPolicy.cs
    startLine: 9
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nA policy definition defines a policy that can be associated \nwith a TOSCA topology or top-level entity definition (e.g., group definition, node template, etc.).\n"
  example: []
  syntax:
    content: public class ToscaPolicy
    content.vb: Public Class ToscaPolicy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Toscana.ToscaPolicy.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaPolicy,Toscana.ToscaPolicy},System.Func{Toscana.ToscaPolicy,System.Boolean})
  - Toscana.ToscaPolicy.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaPolicy,Toscana.ToscaPolicy})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Toscana.ToscaPolicy.#ctor
  commentId: M:Toscana.ToscaPolicy.#ctor
  id: '#ctor'
  parent: Toscana.ToscaPolicy
  langs:
  - csharp
  - vb
  name: ToscaPolicy()
  nameWithType: ToscaPolicy.ToscaPolicy()
  fullName: Toscana.ToscaPolicy.ToscaPolicy()
  type: Constructor
  source:
    remote:
      path: Toscana/ToscaPolicy.cs
      branch: feature/borismod_loop
      repo: https://github.com/QualiSystems/Toscana.git
    id: .ctor
    path: Toscana/ToscaPolicy.cs
    startLine: 14
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nInitializes an instance of <xref href=\"Toscana.ToscaPolicy\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public ToscaPolicy()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaPolicy.Type
  commentId: P:Toscana.ToscaPolicy.Type
  id: Type
  parent: Toscana.ToscaPolicy
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ToscaPolicy.Type
  fullName: Toscana.ToscaPolicy.Type
  type: Property
  source:
    remote:
      path: Toscana/ToscaPolicy.cs
      branch: feature/borismod_loop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Type
    path: Toscana/ToscaPolicy.cs
    startLine: 23
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nThe required name of the policy type the policy definition is based upon.\n"
  example: []
  syntax:
    content: >-
      [Required(ErrorMessage = "Type is required on policy.", AllowEmptyStrings = false)]

      public string Type { get; set; }
    content.vb: >-
      <Required(ErrorMessage:="Type is required on policy.", AllowEmptyStrings:=False)>

      Public Property Type As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: Type is required on policy.
    - name: AllowEmptyStrings
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaPolicy.Description
  commentId: P:Toscana.ToscaPolicy.Description
  id: Description
  parent: Toscana.ToscaPolicy
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ToscaPolicy.Description
  fullName: Toscana.ToscaPolicy.Description
  type: Property
  source:
    remote:
      path: Toscana/ToscaPolicy.cs
      branch: feature/borismod_loop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Description
    path: Toscana/ToscaPolicy.cs
    startLine: 29
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nThe optional description for the policy definition.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    content.vb: Public Property Description As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaPolicy.Properties
  commentId: P:Toscana.ToscaPolicy.Properties
  id: Properties
  parent: Toscana.ToscaPolicy
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: ToscaPolicy.Properties
  fullName: Toscana.ToscaPolicy.Properties
  type: Property
  source:
    remote:
      path: Toscana/ToscaPolicy.cs
      branch: feature/borismod_loop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Properties
    path: Toscana/ToscaPolicy.cs
    startLine: 34
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of property value assignments for the policy definition.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaPropertyAssignment> Properties { get; set; }
    content.vb: Public Property Properties As Dictionary(Of String, ToscaPropertyAssignment)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaPropertyAssignment}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaPolicy.Targets
  commentId: P:Toscana.ToscaPolicy.Targets
  id: Targets
  parent: Toscana.ToscaPolicy
  langs:
  - csharp
  - vb
  name: Targets
  nameWithType: ToscaPolicy.Targets
  fullName: Toscana.ToscaPolicy.Targets
  type: Property
  source:
    remote:
      path: Toscana/ToscaPolicy.cs
      branch: feature/borismod_loop
      repo: https://github.com/QualiSystems/Toscana.git
    id: Targets
    path: Toscana/ToscaPolicy.cs
    startLine: 39
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of valid Node Templates or Groups the Policy can be applied to.\n"
  example: []
  syntax:
    content: public string[] Targets { get; set; }
    content.vb: Public Property Targets As String()
    parameters: []
    return:
      type: System.String[]
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Toscana
  commentId: N:Toscana
  isExternal: false
  name: Toscana
  nameWithType: Toscana
  fullName: Toscana
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaPolicy.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaPolicy,Toscana.ToscaPolicy},System.Func{Toscana.ToscaPolicy,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  name: FromHierarchy<ToscaPolicy>(Func<ToscaPolicy, ToscaPolicy>, Func<ToscaPolicy, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaPolicy>(Func<ToscaPolicy, ToscaPolicy>, Func<ToscaPolicy, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaPolicy>(System.Func<Toscana.ToscaPolicy, Toscana.ToscaPolicy>, System.Func<Toscana.ToscaPolicy, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaPolicy)(Func(Of ToscaPolicy, ToscaPolicy), Func(Of ToscaPolicy, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaPolicy)(System.Func(Of Toscana.ToscaPolicy, Toscana.ToscaPolicy), System.Func(Of Toscana.ToscaPolicy, System.Boolean))
  name.vb: FromHierarchy(Of ToscaPolicy)(Func(Of ToscaPolicy, ToscaPolicy), Func(Of ToscaPolicy, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<ToscaPolicy>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaPolicy>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaPolicy>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of ToscaPolicy)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaPolicy)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaPolicy)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaPolicy.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaPolicy,Toscana.ToscaPolicy})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  name: FromHierarchy<ToscaPolicy>(Func<ToscaPolicy, ToscaPolicy>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaPolicy>(Func<ToscaPolicy, ToscaPolicy>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaPolicy>(System.Func<Toscana.ToscaPolicy, Toscana.ToscaPolicy>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaPolicy)(Func(Of ToscaPolicy, ToscaPolicy))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaPolicy)(System.Func(Of Toscana.ToscaPolicy, Toscana.ToscaPolicy))
  name.vb: FromHierarchy(Of ToscaPolicy)(Func(Of ToscaPolicy, ToscaPolicy))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy<ToscaPolicy>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaPolicy>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaPolicy>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy(Of ToscaPolicy)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaPolicy)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaPolicy)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPolicy
    name: ToscaPolicy
    nameWithType: ToscaPolicy
    fullName: Toscana.ToscaPolicy
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions
  commentId: T:Toscana.Common.EnumerableExtensions
  parent: Toscana.Common
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Toscana.Common.EnumerableExtensions
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common
  commentId: N:Toscana.Common
  isExternal: false
  name: Toscana.Common
  nameWithType: Toscana.Common
  fullName: Toscana.Common
- uid: Toscana.ToscaPolicy
  commentId: T:Toscana.ToscaPolicy
  isExternal: false
  name: ToscaPolicy
  nameWithType: ToscaPolicy
  fullName: Toscana.ToscaPolicy
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaPropertyAssignment}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaPropertyAssignment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaPropertyAssignment>
  nameWithType: Dictionary<String, ToscaPropertyAssignment>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaPropertyAssignment>
  nameWithType.vb: Dictionary(Of String, ToscaPropertyAssignment)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaPropertyAssignment)
  name.vb: Dictionary(Of String, ToscaPropertyAssignment)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPropertyAssignment
    name: ToscaPropertyAssignment
    nameWithType: ToscaPropertyAssignment
    fullName: Toscana.ToscaPropertyAssignment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaPropertyAssignment
    name: ToscaPropertyAssignment
    nameWithType: ToscaPropertyAssignment
    fullName: Toscana.ToscaPropertyAssignment
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
