### YamlMime:ManagedReference
items:
- uid: Toscana.ToscaMetadata
  commentId: T:Toscana.ToscaMetadata
  id: ToscaMetadata
  parent: Toscana
  children:
  - Toscana.ToscaMetadata.CreatedBy
  - Toscana.ToscaMetadata.CsarVersion
  - Toscana.ToscaMetadata.EntryDefinitions
  - Toscana.ToscaMetadata.ToscaMetaFileVersion
  langs:
  - csharp
  - vb
  name: ToscaMetadata
  nameWithType: ToscaMetadata
  fullName: Toscana.ToscaMetadata
  type: Class
  source:
    remote:
      path: Toscana/ToscaMetadata.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaMetadata
    path: Toscana/ToscaMetadata.cs
    startLine: 10
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nRepresents the content of TOSCA.met file which provides entry information for a TOSCA orchestrator \nprocessing the CSAR file.\n"
  example: []
  syntax:
    content: public class ToscaMetadata
    content.vb: Public Class ToscaMetadata
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Toscana.ToscaMetadata.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaMetadata,Toscana.ToscaMetadata},System.Func{Toscana.ToscaMetadata,System.Boolean})
  - Toscana.ToscaMetadata.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaMetadata,Toscana.ToscaMetadata})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Toscana.ToscaMetadata.ToscaMetaFileVersion
  commentId: P:Toscana.ToscaMetadata.ToscaMetaFileVersion
  id: ToscaMetaFileVersion
  parent: Toscana.ToscaMetadata
  langs:
  - csharp
  - vb
  name: ToscaMetaFileVersion
  nameWithType: ToscaMetadata.ToscaMetaFileVersion
  fullName: Toscana.ToscaMetadata.ToscaMetaFileVersion
  type: Property
  source:
    remote:
      path: Toscana/ToscaMetadata.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaMetaFileVersion
    path: Toscana/ToscaMetadata.cs
    startLine: 15
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nSpecifies TOSCA.meta file version\n"
  example: []
  syntax:
    content: >-
      [YamlMember(Alias = "TOSCA-Meta-File-Version")]

      [Required(ErrorMessage = "TOSCA-Meta-File-Version is required in TOSCA.meta", AllowEmptyStrings = false)]

      public Version ToscaMetaFileVersion { get; set; }
    content.vb: >-
      <YamlMember(Alias:="TOSCA-Meta-File-Version")>

      <Required(ErrorMessage:="TOSCA-Meta-File-Version is required in TOSCA.meta", AllowEmptyStrings:=False)>

      Public Property ToscaMetaFileVersion As Version
    parameters: []
    return:
      type: System.Version
  attributes:
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: TOSCA-Meta-File-Version
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: TOSCA-Meta-File-Version is required in TOSCA.meta
    - name: AllowEmptyStrings
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaMetadata.CsarVersion
  commentId: P:Toscana.ToscaMetadata.CsarVersion
  id: CsarVersion
  parent: Toscana.ToscaMetadata
  langs:
  - csharp
  - vb
  name: CsarVersion
  nameWithType: ToscaMetadata.CsarVersion
  fullName: Toscana.ToscaMetadata.CsarVersion
  type: Property
  source:
    remote:
      path: Toscana/ToscaMetadata.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: CsarVersion
    path: Toscana/ToscaMetadata.cs
    startLine: 24
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nDenotes the verison of CSAR\nDue to the simplified structure of the CSAR file and TOSCA.meta file compared to TOSCA 1.0, \nthe CSAR-Version keyword listed in block_0 of the meta-file is required to denote version 1.1.\n"
  example: []
  syntax:
    content: >-
      [YamlMember(Alias = "CSAR-Version")]

      [Required(ErrorMessage = "CSAR-Version is required in TOSCA.meta", AllowEmptyStrings = false)]

      public Version CsarVersion { get; set; }
    content.vb: >-
      <YamlMember(Alias:="CSAR-Version")>

      <Required(ErrorMessage:="CSAR-Version is required in TOSCA.meta", AllowEmptyStrings:=False)>

      Public Property CsarVersion As Version
    parameters: []
    return:
      type: System.Version
  attributes:
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: CSAR-Version
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: CSAR-Version is required in TOSCA.meta
    - name: AllowEmptyStrings
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaMetadata.CreatedBy
  commentId: P:Toscana.ToscaMetadata.CreatedBy
  id: CreatedBy
  parent: Toscana.ToscaMetadata
  langs:
  - csharp
  - vb
  name: CreatedBy
  nameWithType: ToscaMetadata.CreatedBy
  fullName: Toscana.ToscaMetadata.CreatedBy
  type: Property
  source:
    remote:
      path: Toscana/ToscaMetadata.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: CreatedBy
    path: Toscana/ToscaMetadata.cs
    startLine: 31
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nSpecifies who created the CSAR  \n"
  example: []
  syntax:
    content: >-
      [YamlMember(Alias = "Created-By")]

      [Required(ErrorMessage = "Created-By is required in TOSCA.meta", AllowEmptyStrings = false)]

      public string CreatedBy { get; set; }
    content.vb: >-
      <YamlMember(Alias:="Created-By")>

      <Required(ErrorMessage:="Created-By is required in TOSCA.meta", AllowEmptyStrings:=False)>

      Public Property CreatedBy As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: Created-By
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: Created-By is required in TOSCA.meta
    - name: AllowEmptyStrings
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaMetadata.EntryDefinitions
  commentId: P:Toscana.ToscaMetadata.EntryDefinitions
  id: EntryDefinitions
  parent: Toscana.ToscaMetadata
  langs:
  - csharp
  - vb
  name: EntryDefinitions
  nameWithType: ToscaMetadata.EntryDefinitions
  fullName: Toscana.ToscaMetadata.EntryDefinitions
  type: Property
  source:
    remote:
      path: Toscana/ToscaMetadata.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: EntryDefinitions
    path: Toscana/ToscaMetadata.cs
    startLine: 39
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nEntry-Definitions keyword pointing to a valid TOSCA definitions YAML file that a TOSCA \norchestrator should use as entry for parsing the contents of the overall CSAR file.\n"
  example: []
  syntax:
    content: >-
      [YamlMember(Alias = "Entry-Definitions")]

      [Required(ErrorMessage = "Entry-Definitions is required in TOSCA.meta", AllowEmptyStrings = false)]

      public string EntryDefinitions { get; set; }
    content.vb: >-
      <YamlMember(Alias:="Entry-Definitions")>

      <Required(ErrorMessage:="Entry-Definitions is required in TOSCA.meta", AllowEmptyStrings:=False)>

      Public Property EntryDefinitions As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: YamlDotNet.Serialization.YamlMemberAttribute
    ctor: YamlDotNet.Serialization.YamlMemberAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Alias
      type: System.String
      value: Entry-Definitions
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
    namedArguments:
    - name: ErrorMessage
      type: System.String
      value: Entry-Definitions is required in TOSCA.meta
    - name: AllowEmptyStrings
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Toscana
  commentId: N:Toscana
  isExternal: false
  name: Toscana
  nameWithType: Toscana
  fullName: Toscana
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaMetadata.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaMetadata,Toscana.ToscaMetadata},System.Func{Toscana.ToscaMetadata,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  name: FromHierarchy<ToscaMetadata>(Func<ToscaMetadata, ToscaMetadata>, Func<ToscaMetadata, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaMetadata>(Func<ToscaMetadata, ToscaMetadata>, Func<ToscaMetadata, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaMetadata>(System.Func<Toscana.ToscaMetadata, Toscana.ToscaMetadata>, System.Func<Toscana.ToscaMetadata, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaMetadata)(Func(Of ToscaMetadata, ToscaMetadata), Func(Of ToscaMetadata, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaMetadata)(System.Func(Of Toscana.ToscaMetadata, Toscana.ToscaMetadata), System.Func(Of Toscana.ToscaMetadata, System.Boolean))
  name.vb: FromHierarchy(Of ToscaMetadata)(Func(Of ToscaMetadata, ToscaMetadata), Func(Of ToscaMetadata, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<ToscaMetadata>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaMetadata>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaMetadata>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of ToscaMetadata)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaMetadata)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaMetadata)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaMetadata.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaMetadata,Toscana.ToscaMetadata})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  name: FromHierarchy<ToscaMetadata>(Func<ToscaMetadata, ToscaMetadata>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaMetadata>(Func<ToscaMetadata, ToscaMetadata>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaMetadata>(System.Func<Toscana.ToscaMetadata, Toscana.ToscaMetadata>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaMetadata)(Func(Of ToscaMetadata, ToscaMetadata))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaMetadata)(System.Func(Of Toscana.ToscaMetadata, Toscana.ToscaMetadata))
  name.vb: FromHierarchy(Of ToscaMetadata)(Func(Of ToscaMetadata, ToscaMetadata))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy<ToscaMetadata>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaMetadata>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaMetadata>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy(Of ToscaMetadata)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaMetadata)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaMetadata)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaMetadata
    name: ToscaMetadata
    nameWithType: ToscaMetadata
    fullName: Toscana.ToscaMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions
  commentId: T:Toscana.Common.EnumerableExtensions
  parent: Toscana.Common
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Toscana.Common.EnumerableExtensions
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common
  commentId: N:Toscana.Common
  isExternal: false
  name: Toscana.Common
  nameWithType: Toscana.Common
  fullName: Toscana.Common
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
