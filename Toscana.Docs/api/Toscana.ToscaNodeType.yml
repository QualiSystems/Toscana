### YamlMime:ManagedReference
items:
- uid: Toscana.ToscaNodeType
  commentId: T:Toscana.ToscaNodeType
  id: ToscaNodeType
  parent: Toscana
  children:
  - Toscana.ToscaNodeType.#ctor
  - Toscana.ToscaNodeType.AddRequirement(System.String,Toscana.ToscaRequirement)
  - Toscana.ToscaNodeType.Artifacts
  - Toscana.ToscaNodeType.Attributes
  - Toscana.ToscaNodeType.Capabilities
  - Toscana.ToscaNodeType.Description
  - Toscana.ToscaNodeType.GetAllCapabilityTypes
  - Toscana.ToscaNodeType.GetAllProperties
  - Toscana.ToscaNodeType.GetAllRequirements
  - Toscana.ToscaNodeType.GetDerivedFromEntity
  - Toscana.ToscaNodeType.Interfaces
  - Toscana.ToscaNodeType.Properties
  - Toscana.ToscaNodeType.Requirements
  - Toscana.ToscaNodeType.SetDerivedFromToRoot(System.String)
  - Toscana.ToscaNodeType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  - Toscana.ToscaNodeType.Version
  langs:
  - csharp
  - vb
  name: ToscaNodeType
  nameWithType: ToscaNodeType
  fullName: Toscana.ToscaNodeType
  type: Class
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: ToscaNodeType
    path: Toscana/ToscaNodeType.cs
    startLine: 13
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nA Node Type is a reusable entity that defines the type of one or more Node Templates. \nAs such, a Node Type defines the structure of observable properties via a Properties Definition, the Requirements and Capabilities of the node as well as its supported interfaces.\n"
  example: []
  syntax:
    content: 'public class ToscaNodeType : ToscaObject<ToscaNodeType>, IToscaEntityWithProperties<ToscaNodeType>, IDerivableToscaEntity<ToscaNodeType>, IValidatableObject'
    content.vb: >-
      Public Class ToscaNodeType
          Inherits ToscaObject(Of ToscaNodeType)
          Implements IToscaEntityWithProperties(Of ToscaNodeType), IDerivableToscaEntity(Of ToscaNodeType), IValidatableObject
  inheritance:
  - System.Object
  - Toscana.ToscaObject{Toscana.ToscaNodeType}
  implements:
  - Toscana.IToscaEntityWithProperties{Toscana.ToscaNodeType}
  - Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}
  - System.ComponentModel.DataAnnotations.IValidatableObject
  inheritedMembers:
  - Toscana.ToscaObject{Toscana.ToscaNodeType}.DerivedFrom
  - Toscana.ToscaObject{Toscana.ToscaNodeType}.GetCloudServiceArchive
  - Toscana.ToscaObject{Toscana.ToscaNodeType}.IsRoot
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Toscana.ToscaNodeType.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaNodeType,Toscana.ToscaNodeType},System.Func{Toscana.ToscaNodeType,System.Boolean})
  - Toscana.ToscaNodeType.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaNodeType,Toscana.ToscaNodeType})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Toscana.ToscaNodeType.#ctor
  commentId: M:Toscana.ToscaNodeType.#ctor
  id: '#ctor'
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: ToscaNodeType()
  nameWithType: ToscaNodeType.ToscaNodeType()
  fullName: Toscana.ToscaNodeType.ToscaNodeType()
  type: Constructor
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: .ctor
    path: Toscana/ToscaNodeType.cs
    startLine: 20
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nInitializes a instance of ToscaNodeType\n"
  example: []
  syntax:
    content: public ToscaNodeType()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Version
  commentId: P:Toscana.ToscaNodeType.Version
  id: Version
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: ToscaNodeType.Version
  fullName: Toscana.ToscaNodeType.Version
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Version
    path: Toscana/ToscaNodeType.cs
    startLine: 34
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional version for the Node Type definition.\n"
  example: []
  syntax:
    content: public Version Version { get; set; }
    content.vb: Public Property Version As Version
    parameters: []
    return:
      type: System.Version
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Description
  commentId: P:Toscana.ToscaNodeType.Description
  id: Description
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ToscaNodeType.Description
  fullName: Toscana.ToscaNodeType.Description
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Description
    path: Toscana/ToscaNodeType.cs
    startLine: 39
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional description for the Node Type.\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    content.vb: Public Property Description As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Properties
  commentId: P:Toscana.ToscaNodeType.Properties
  id: Properties
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: ToscaNodeType.Properties
  fullName: Toscana.ToscaNodeType.Properties
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Properties
    path: Toscana/ToscaNodeType.cs
    startLine: 44
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of property definitions for the Node Type.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaProperty> Properties { get; set; }
    content.vb: Public Property Properties As Dictionary(Of String, ToscaProperty)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaProperty}
  implements:
  - Toscana.IToscaEntityWithProperties{Toscana.ToscaNodeType}.Properties
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Attributes
  commentId: P:Toscana.ToscaNodeType.Attributes
  id: Attributes
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: ToscaNodeType.Attributes
  fullName: Toscana.ToscaNodeType.Attributes
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Attributes
    path: Toscana/ToscaNodeType.cs
    startLine: 49
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of attribute definitions for the Node Type.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaAttribute> Attributes { get; set; }
    content.vb: Public Property Attributes As Dictionary(Of String, ToscaAttribute)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaAttribute}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Requirements
  commentId: P:Toscana.ToscaNodeType.Requirements
  id: Requirements
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Requirements
  nameWithType: ToscaNodeType.Requirements
  fullName: Toscana.ToscaNodeType.Requirements
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Requirements
    path: Toscana/ToscaNodeType.cs
    startLine: 54
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional sequenced list of requirement definitions for the Node Type.\n"
  example: []
  syntax:
    content: public List<Dictionary<string, ToscaRequirement>> Requirements { get; set; }
    content.vb: Public Property Requirements As List(Of Dictionary(Of String, ToscaRequirement))
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRequirement}}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Capabilities
  commentId: P:Toscana.ToscaNodeType.Capabilities
  id: Capabilities
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Capabilities
  nameWithType: ToscaNodeType.Capabilities
  fullName: Toscana.ToscaNodeType.Capabilities
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Capabilities
    path: Toscana/ToscaNodeType.cs
    startLine: 59
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of capability definitions for the Node Type.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaCapability> Capabilities { get; set; }
    content.vb: Public Property Capabilities As Dictionary(Of String, ToscaCapability)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapability}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Interfaces
  commentId: P:Toscana.ToscaNodeType.Interfaces
  id: Interfaces
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Interfaces
  nameWithType: ToscaNodeType.Interfaces
  fullName: Toscana.ToscaNodeType.Interfaces
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Interfaces
    path: Toscana/ToscaNodeType.cs
    startLine: 64
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of interface definitions supported by the Node Type.\n"
  example: []
  syntax:
    content: public Dictionary<string, Dictionary<string, object>> Interfaces { get; set; }
    content.vb: Public Property Interfaces As Dictionary(Of String, Dictionary(Of String, Object))
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.Artifacts
  commentId: P:Toscana.ToscaNodeType.Artifacts
  id: Artifacts
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: Artifacts
  nameWithType: ToscaNodeType.Artifacts
  fullName: Toscana.ToscaNodeType.Artifacts
  type: Property
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: Artifacts
    path: Toscana/ToscaNodeType.cs
    startLine: 69
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAn optional list of named artifact definitions for the Node Type.\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaArtifact> Artifacts { get; set; }
    content.vb: Public Property Artifacts As Dictionary(Of String, ToscaArtifact)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaArtifact}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.GetDerivedFromEntity
  commentId: M:Toscana.ToscaNodeType.GetDerivedFromEntity
  id: GetDerivedFromEntity
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: GetDerivedFromEntity()
  nameWithType: ToscaNodeType.GetDerivedFromEntity()
  fullName: Toscana.ToscaNodeType.GetDerivedFromEntity()
  type: Method
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: GetDerivedFromEntity
    path: Toscana/ToscaNodeType.cs
    startLine: 76
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nReturns ToscaNodetype this Node type derives from.\nFor root node type, null is returned\n"
  example: []
  syntax:
    content: public override ToscaNodeType GetDerivedFromEntity()
    content.vb: Public Overrides Function GetDerivedFromEntity As ToscaNodeType
    return:
      type: Toscana.ToscaNodeType
  overridden: Toscana.ToscaObject{Toscana.ToscaNodeType}.GetDerivedFromEntity
  exceptions:
  - type: Toscana.Exceptions.ToscaNodeTypeNotFoundException
    commentId: T:Toscana.Exceptions.ToscaNodeTypeNotFoundException
    description: Thrown when Node Type pointed by Derived From not found
  implements:
  - Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}.GetDerivedFromEntity
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Toscana.ToscaNodeType.GetAllRequirements
  commentId: M:Toscana.ToscaNodeType.GetAllRequirements
  id: GetAllRequirements
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: GetAllRequirements()
  nameWithType: ToscaNodeType.GetAllRequirements()
  fullName: Toscana.ToscaNodeType.GetAllRequirements()
  type: Method
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: GetAllRequirements
    path: Toscana/ToscaNodeType.cs
    startLine: 91
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nReturns requirements of the ToscaNodeType and its ancestors\n"
  example: []
  syntax:
    content: public List<ToscaRequirement> GetAllRequirements()
    content.vb: Public Function GetAllRequirements As List(Of ToscaRequirement)
    return:
      type: System.Collections.Generic.List{Toscana.ToscaRequirement}
      description: ''
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.GetAllCapabilityTypes
  commentId: M:Toscana.ToscaNodeType.GetAllCapabilityTypes
  id: GetAllCapabilityTypes
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: GetAllCapabilityTypes()
  nameWithType: ToscaNodeType.GetAllCapabilityTypes()
  fullName: Toscana.ToscaNodeType.GetAllCapabilityTypes()
  type: Method
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: GetAllCapabilityTypes
    path: Toscana/ToscaNodeType.cs
    startLine: 107
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nReturns capability types of the ToscaNodeType and its ancestors\n"
  example: []
  syntax:
    content: public Dictionary<string, ToscaCapabilityType> GetAllCapabilityTypes()
    content.vb: Public Function GetAllCapabilityTypes As Dictionary(Of String, ToscaCapabilityType)
    return:
      type: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapabilityType}
      description: Caapbility types of node type and its ancestors
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.AddRequirement(System.String,Toscana.ToscaRequirement)
  commentId: M:Toscana.ToscaNodeType.AddRequirement(System.String,Toscana.ToscaRequirement)
  id: AddRequirement(System.String,Toscana.ToscaRequirement)
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: AddRequirement(String, ToscaRequirement)
  nameWithType: ToscaNodeType.AddRequirement(String, ToscaRequirement)
  fullName: Toscana.ToscaNodeType.AddRequirement(System.String, Toscana.ToscaRequirement)
  type: Method
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: AddRequirement
    path: Toscana/ToscaNodeType.cs
    startLine: 126
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nAdds a requirements\n"
  example: []
  syntax:
    content: public void AddRequirement(string name, ToscaRequirement toscaRequirement)
    content.vb: Public Sub AddRequirement(name As String, toscaRequirement As ToscaRequirement)
    parameters:
    - id: name
      type: System.String
      description: Requirement name
    - id: toscaRequirement
      type: Toscana.ToscaRequirement
      description: Requirement to add
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.SetDerivedFromToRoot(System.String)
  commentId: M:Toscana.ToscaNodeType.SetDerivedFromToRoot(System.String)
  id: SetDerivedFromToRoot(System.String)
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: SetDerivedFromToRoot(String)
  nameWithType: ToscaNodeType.SetDerivedFromToRoot(String)
  fullName: Toscana.ToscaNodeType.SetDerivedFromToRoot(System.String)
  type: Method
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: SetDerivedFromToRoot
    path: Toscana/ToscaNodeType.cs
    startLine: 138
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nSets DerivedFrom to point to tosca.nodes.Root if it's not set\n"
  example: []
  syntax:
    content: public override void SetDerivedFromToRoot(string name)
    content.vb: Public Overrides Sub SetDerivedFromToRoot(name As String)
    parameters:
    - id: name
      type: System.String
      description: Node type name
  overridden: Toscana.ToscaObject{Toscana.ToscaNodeType}.SetDerivedFromToRoot(System.String)
  implements:
  - Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}.SetDerivedFromToRoot(System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Toscana.ToscaNodeType.GetAllProperties
  commentId: M:Toscana.ToscaNodeType.GetAllProperties
  id: GetAllProperties
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: GetAllProperties()
  nameWithType: ToscaNodeType.GetAllProperties()
  fullName: Toscana.ToscaNodeType.GetAllProperties()
  type: Method
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: GetAllProperties
    path: Toscana/ToscaNodeType.cs
    startLine: 151
  assemblies:
  - Toscana
  namespace: Toscana
  summary: "\nReturns all the properties of the node type and its ancestors\n"
  example: []
  syntax:
    content: public IReadOnlyDictionary<string, ToscaProperty> GetAllProperties()
    content.vb: Public Function GetAllProperties As IReadOnlyDictionary(Of String, ToscaProperty)
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,Toscana.ToscaProperty}
      description: ''
  exceptions:
  - type: Toscana.Exceptions.ToscaNodeTypeNotFoundException
    commentId: T:Toscana.Exceptions.ToscaNodeTypeNotFoundException
    description: Thrown when Node Type pointed by Derived From not found
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Toscana.ToscaNodeType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  commentId: M:Toscana.ToscaNodeType.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  id: System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  isEii: true
  parent: Toscana.ToscaNodeType
  langs:
  - csharp
  - vb
  name: IValidatableObject.Validate(ValidationContext)
  nameWithType: ToscaNodeType.IValidatableObject.Validate(ValidationContext)
  fullName: Toscana.ToscaNodeType.System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  type: Method
  source:
    remote:
      path: Toscana/ToscaNodeType.cs
      branch: master
      repo: https://github.com/QualiSystems/Toscana.git
    id: System.ComponentModel.DataAnnotations.IValidatableObject.Validate
    path: Toscana/ToscaNodeType.cs
    startLine: 156
  assemblies:
  - Toscana
  namespace: Toscana
  syntax:
    content: IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    content.vb: Function System.ComponentModel.DataAnnotations.IValidatableObject.Validate(validationContext As ValidationContext) As IEnumerable(Of ValidationResult) Implements IValidatableObject.Validate
    parameters:
    - id: validationContext
      type: System.ComponentModel.DataAnnotations.ValidationContext
    return:
      type: System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}
  implements:
  - System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  nameWithType.vb: ToscaNodeType.System.ComponentModel.DataAnnotations.IValidatableObject.Validate(ValidationContext)
  name.vb: System.ComponentModel.DataAnnotations.IValidatableObject.Validate(ValidationContext)
references:
- uid: Toscana
  commentId: N:Toscana
  isExternal: false
  name: Toscana
  nameWithType: Toscana
  fullName: Toscana
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Toscana.ToscaObject{Toscana.ToscaNodeType}
  commentId: T:Toscana.ToscaObject{Toscana.ToscaNodeType}
  parent: Toscana
  definition: Toscana.ToscaObject`1
  name: ToscaObject<ToscaNodeType>
  nameWithType: ToscaObject<ToscaNodeType>
  fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>
  nameWithType.vb: ToscaObject(Of ToscaNodeType)
  fullname.vb: Toscana.ToscaObject(Of Toscana.ToscaNodeType)
  name.vb: ToscaObject(Of ToscaNodeType)
  spec.csharp:
  - uid: Toscana.ToscaObject`1
    name: ToscaObject
    nameWithType: ToscaObject
    fullName: Toscana.ToscaObject
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Toscana.ToscaObject`1
    name: ToscaObject
    nameWithType: ToscaObject
    fullName: Toscana.ToscaObject
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IToscaEntityWithProperties{Toscana.ToscaNodeType}
  commentId: T:Toscana.IToscaEntityWithProperties{Toscana.ToscaNodeType}
  parent: Toscana
  definition: Toscana.IToscaEntityWithProperties`1
  name: IToscaEntityWithProperties<ToscaNodeType>
  nameWithType: IToscaEntityWithProperties<ToscaNodeType>
  fullName: Toscana.IToscaEntityWithProperties<Toscana.ToscaNodeType>
  nameWithType.vb: IToscaEntityWithProperties(Of ToscaNodeType)
  fullname.vb: Toscana.IToscaEntityWithProperties(Of Toscana.ToscaNodeType)
  name.vb: IToscaEntityWithProperties(Of ToscaNodeType)
  spec.csharp:
  - uid: Toscana.IToscaEntityWithProperties`1
    name: IToscaEntityWithProperties
    nameWithType: IToscaEntityWithProperties
    fullName: Toscana.IToscaEntityWithProperties
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Toscana.IToscaEntityWithProperties`1
    name: IToscaEntityWithProperties
    nameWithType: IToscaEntityWithProperties
    fullName: Toscana.IToscaEntityWithProperties
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}
  commentId: T:Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}
  parent: Toscana
  definition: Toscana.IDerivableToscaEntity`1
  name: IDerivableToscaEntity<ToscaNodeType>
  nameWithType: IDerivableToscaEntity<ToscaNodeType>
  fullName: Toscana.IDerivableToscaEntity<Toscana.ToscaNodeType>
  nameWithType.vb: IDerivableToscaEntity(Of ToscaNodeType)
  fullname.vb: Toscana.IDerivableToscaEntity(Of Toscana.ToscaNodeType)
  name.vb: IDerivableToscaEntity(Of ToscaNodeType)
  spec.csharp:
  - uid: Toscana.IDerivableToscaEntity`1
    name: IDerivableToscaEntity
    nameWithType: IDerivableToscaEntity
    fullName: Toscana.IDerivableToscaEntity
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Toscana.IDerivableToscaEntity`1
    name: IDerivableToscaEntity
    nameWithType: IDerivableToscaEntity
    fullName: Toscana.IDerivableToscaEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.IValidatableObject
  commentId: T:System.ComponentModel.DataAnnotations.IValidatableObject
  parent: System.ComponentModel.DataAnnotations
  isExternal: true
  name: IValidatableObject
  nameWithType: IValidatableObject
  fullName: System.ComponentModel.DataAnnotations.IValidatableObject
- uid: Toscana.ToscaObject{Toscana.ToscaNodeType}.DerivedFrom
  commentId: P:Toscana.ToscaObject{Toscana.ToscaNodeType}.DerivedFrom
  parent: Toscana.ToscaObject{Toscana.ToscaNodeType}
  definition: Toscana.ToscaObject`1.DerivedFrom
  name: DerivedFrom
  nameWithType: ToscaObject<ToscaNodeType>.DerivedFrom
  fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.DerivedFrom
  nameWithType.vb: ToscaObject(Of ToscaNodeType).DerivedFrom
  fullname.vb: Toscana.ToscaObject(Of Toscana.ToscaNodeType).DerivedFrom
- uid: Toscana.ToscaObject{Toscana.ToscaNodeType}.GetCloudServiceArchive
  commentId: M:Toscana.ToscaObject{Toscana.ToscaNodeType}.GetCloudServiceArchive
  parent: Toscana.ToscaObject{Toscana.ToscaNodeType}
  definition: Toscana.ToscaObject`1.GetCloudServiceArchive
  name: GetCloudServiceArchive()
  nameWithType: ToscaObject<ToscaNodeType>.GetCloudServiceArchive()
  fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.GetCloudServiceArchive()
  nameWithType.vb: ToscaObject(Of ToscaNodeType).GetCloudServiceArchive()
  fullname.vb: Toscana.ToscaObject(Of Toscana.ToscaNodeType).GetCloudServiceArchive()
  spec.csharp:
  - uid: Toscana.ToscaObject`1.GetCloudServiceArchive
    name: GetCloudServiceArchive
    nameWithType: ToscaObject<ToscaNodeType>.GetCloudServiceArchive
    fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.GetCloudServiceArchive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.GetCloudServiceArchive
    name: GetCloudServiceArchive
    nameWithType: ToscaObject(Of ToscaNodeType).GetCloudServiceArchive
    fullName: Toscana.ToscaObject(Of Toscana.ToscaNodeType).GetCloudServiceArchive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaObject{Toscana.ToscaNodeType}.IsRoot
  commentId: M:Toscana.ToscaObject{Toscana.ToscaNodeType}.IsRoot
  parent: Toscana.ToscaObject{Toscana.ToscaNodeType}
  definition: Toscana.ToscaObject`1.IsRoot
  name: IsRoot()
  nameWithType: ToscaObject<ToscaNodeType>.IsRoot()
  fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.IsRoot()
  nameWithType.vb: ToscaObject(Of ToscaNodeType).IsRoot()
  fullname.vb: Toscana.ToscaObject(Of Toscana.ToscaNodeType).IsRoot()
  spec.csharp:
  - uid: Toscana.ToscaObject`1.IsRoot
    name: IsRoot
    nameWithType: ToscaObject<ToscaNodeType>.IsRoot
    fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.IsRoot
    name: IsRoot
    nameWithType: ToscaObject(Of ToscaNodeType).IsRoot
    fullName: Toscana.ToscaObject(Of Toscana.ToscaNodeType).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaNodeType.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaNodeType,Toscana.ToscaNodeType},System.Func{Toscana.ToscaNodeType,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  name: FromHierarchy<ToscaNodeType>(Func<ToscaNodeType, ToscaNodeType>, Func<ToscaNodeType, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaNodeType>(Func<ToscaNodeType, ToscaNodeType>, Func<ToscaNodeType, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaNodeType>(System.Func<Toscana.ToscaNodeType, Toscana.ToscaNodeType>, System.Func<Toscana.ToscaNodeType, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaNodeType)(Func(Of ToscaNodeType, ToscaNodeType), Func(Of ToscaNodeType, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaNodeType)(System.Func(Of Toscana.ToscaNodeType, Toscana.ToscaNodeType), System.Func(Of Toscana.ToscaNodeType, System.Boolean))
  name.vb: FromHierarchy(Of ToscaNodeType)(Func(Of ToscaNodeType, ToscaNodeType), Func(Of ToscaNodeType, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<ToscaNodeType>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaNodeType>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaNodeType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of ToscaNodeType)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaNodeType)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaNodeType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaNodeType.Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{Toscana.ToscaNodeType,Toscana.ToscaNodeType})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  parent: Toscana.Common.EnumerableExtensions
  definition: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  name: FromHierarchy<ToscaNodeType>(Func<ToscaNodeType, ToscaNodeType>)
  nameWithType: EnumerableExtensions.FromHierarchy<ToscaNodeType>(Func<ToscaNodeType, ToscaNodeType>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaNodeType>(System.Func<Toscana.ToscaNodeType, Toscana.ToscaNodeType>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of ToscaNodeType)(Func(Of ToscaNodeType, ToscaNodeType))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaNodeType)(System.Func(Of Toscana.ToscaNodeType, Toscana.ToscaNodeType))
  name.vb: FromHierarchy(Of ToscaNodeType)(Func(Of ToscaNodeType, ToscaNodeType))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy<ToscaNodeType>
    nameWithType: EnumerableExtensions.FromHierarchy<ToscaNodeType>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<Toscana.ToscaNodeType>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(System.Func{``0,``0})
    name: FromHierarchy(Of ToscaNodeType)
    nameWithType: EnumerableExtensions.FromHierarchy(Of ToscaNodeType)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of Toscana.ToscaNodeType)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaNodeType
    name: ToscaNodeType
    nameWithType: ToscaNodeType
    fullName: Toscana.ToscaNodeType
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Toscana.ToscaObject`1
  commentId: T:Toscana.ToscaObject`1
  isExternal: false
  name: ToscaObject<T>
  nameWithType: ToscaObject<T>
  fullName: Toscana.ToscaObject<T>
  nameWithType.vb: ToscaObject(Of T)
  fullname.vb: Toscana.ToscaObject(Of T)
  name.vb: ToscaObject(Of T)
  spec.csharp:
  - uid: Toscana.ToscaObject`1
    name: ToscaObject
    nameWithType: ToscaObject
    fullName: Toscana.ToscaObject
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Toscana.ToscaObject`1
    name: ToscaObject
    nameWithType: ToscaObject
    fullName: Toscana.ToscaObject
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IToscaEntityWithProperties`1
  commentId: T:Toscana.IToscaEntityWithProperties`1
  isExternal: false
  name: IToscaEntityWithProperties<T>
  nameWithType: IToscaEntityWithProperties<T>
  fullName: Toscana.IToscaEntityWithProperties<T>
  nameWithType.vb: IToscaEntityWithProperties(Of T)
  fullname.vb: Toscana.IToscaEntityWithProperties(Of T)
  name.vb: IToscaEntityWithProperties(Of T)
  spec.csharp:
  - uid: Toscana.IToscaEntityWithProperties`1
    name: IToscaEntityWithProperties
    nameWithType: IToscaEntityWithProperties
    fullName: Toscana.IToscaEntityWithProperties
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Toscana.IToscaEntityWithProperties`1
    name: IToscaEntityWithProperties
    nameWithType: IToscaEntityWithProperties
    fullName: Toscana.IToscaEntityWithProperties
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IDerivableToscaEntity`1
  commentId: T:Toscana.IDerivableToscaEntity`1
  isExternal: false
  name: IDerivableToscaEntity<T>
  nameWithType: IDerivableToscaEntity<T>
  fullName: Toscana.IDerivableToscaEntity<T>
  nameWithType.vb: IDerivableToscaEntity(Of T)
  fullname.vb: Toscana.IDerivableToscaEntity(Of T)
  name.vb: IDerivableToscaEntity(Of T)
  spec.csharp:
  - uid: Toscana.IDerivableToscaEntity`1
    name: IDerivableToscaEntity
    nameWithType: IDerivableToscaEntity
    fullName: Toscana.IDerivableToscaEntity
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Toscana.IDerivableToscaEntity`1
    name: IDerivableToscaEntity
    nameWithType: IDerivableToscaEntity
    fullName: Toscana.IDerivableToscaEntity
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations
  commentId: N:System.ComponentModel.DataAnnotations
  isExternal: false
  name: System.ComponentModel.DataAnnotations
  nameWithType: System.ComponentModel.DataAnnotations
  fullName: System.ComponentModel.DataAnnotations
- uid: Toscana.ToscaObject`1.DerivedFrom
  commentId: P:Toscana.ToscaObject`1.DerivedFrom
  isExternal: false
  name: DerivedFrom
  nameWithType: ToscaObject<T>.DerivedFrom
  fullName: Toscana.ToscaObject<T>.DerivedFrom
  nameWithType.vb: ToscaObject(Of T).DerivedFrom
  fullname.vb: Toscana.ToscaObject(Of T).DerivedFrom
- uid: Toscana.ToscaObject`1.GetCloudServiceArchive
  commentId: M:Toscana.ToscaObject`1.GetCloudServiceArchive
  isExternal: false
  name: GetCloudServiceArchive()
  nameWithType: ToscaObject<T>.GetCloudServiceArchive()
  fullName: Toscana.ToscaObject<T>.GetCloudServiceArchive()
  nameWithType.vb: ToscaObject(Of T).GetCloudServiceArchive()
  fullname.vb: Toscana.ToscaObject(Of T).GetCloudServiceArchive()
  spec.csharp:
  - uid: Toscana.ToscaObject`1.GetCloudServiceArchive
    name: GetCloudServiceArchive
    nameWithType: ToscaObject<T>.GetCloudServiceArchive
    fullName: Toscana.ToscaObject<T>.GetCloudServiceArchive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.GetCloudServiceArchive
    name: GetCloudServiceArchive
    nameWithType: ToscaObject(Of T).GetCloudServiceArchive
    fullName: Toscana.ToscaObject(Of T).GetCloudServiceArchive
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaObject`1.IsRoot
  commentId: M:Toscana.ToscaObject`1.IsRoot
  isExternal: false
  name: IsRoot()
  nameWithType: ToscaObject<T>.IsRoot()
  fullName: Toscana.ToscaObject<T>.IsRoot()
  nameWithType.vb: ToscaObject(Of T).IsRoot()
  fullname.vb: Toscana.ToscaObject(Of T).IsRoot()
  spec.csharp:
  - uid: Toscana.ToscaObject`1.IsRoot
    name: IsRoot
    nameWithType: ToscaObject<T>.IsRoot
    fullName: Toscana.ToscaObject<T>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.IsRoot
    name: IsRoot
    nameWithType: ToscaObject(Of T).IsRoot
    fullName: Toscana.ToscaObject(Of T).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>, Func<TSource, Boolean>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common.EnumerableExtensions
  commentId: T:Toscana.Common.EnumerableExtensions
  parent: Toscana.Common
  isExternal: false
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Toscana.Common.EnumerableExtensions
- uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  commentId: M:Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
  isExternal: true
  name: FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  nameWithType: EnumerableExtensions.FromHierarchy<TSource>(TSource, Func<TSource, TSource>)
  fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>(TSource, System.Func<TSource, TSource>)
  nameWithType.vb: EnumerableExtensions.FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  fullname.vb: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)(TSource, System.Func(Of TSource, TSource))
  name.vb: FromHierarchy(Of TSource)(TSource, Func(Of TSource, TSource))
  spec.csharp:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy<TSource>
    nameWithType: EnumerableExtensions.FromHierarchy<TSource>
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.Common.EnumerableExtensions.FromHierarchy``1(``0,System.Func{``0,``0})
    name: FromHierarchy(Of TSource)
    nameWithType: EnumerableExtensions.FromHierarchy(Of TSource)
    fullName: Toscana.Common.EnumerableExtensions.FromHierarchy(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Common
  commentId: N:Toscana.Common
  isExternal: false
  name: Toscana.Common
  nameWithType: Toscana.Common
  fullName: Toscana.Common
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Toscana.IToscaEntityWithProperties{Toscana.ToscaNodeType}.Properties
  commentId: P:Toscana.IToscaEntityWithProperties{Toscana.ToscaNodeType}.Properties
  parent: Toscana.IToscaEntityWithProperties{Toscana.ToscaNodeType}
  definition: Toscana.IToscaEntityWithProperties`1.Properties
  name: Properties
  nameWithType: IToscaEntityWithProperties<ToscaNodeType>.Properties
  fullName: Toscana.IToscaEntityWithProperties<Toscana.ToscaNodeType>.Properties
  nameWithType.vb: IToscaEntityWithProperties(Of ToscaNodeType).Properties
  fullname.vb: Toscana.IToscaEntityWithProperties(Of Toscana.ToscaNodeType).Properties
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaProperty}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaProperty>
  nameWithType: Dictionary<String, ToscaProperty>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaProperty>
  nameWithType.vb: Dictionary(Of String, ToscaProperty)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaProperty)
  name.vb: Dictionary(Of String, ToscaProperty)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaProperty
    name: ToscaProperty
    nameWithType: ToscaProperty
    fullName: Toscana.ToscaProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaProperty
    name: ToscaProperty
    nameWithType: ToscaProperty
    fullName: Toscana.ToscaProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IToscaEntityWithProperties`1.Properties
  commentId: P:Toscana.IToscaEntityWithProperties`1.Properties
  isExternal: false
  name: Properties
  nameWithType: IToscaEntityWithProperties<T>.Properties
  fullName: Toscana.IToscaEntityWithProperties<T>.Properties
  nameWithType.vb: IToscaEntityWithProperties(Of T).Properties
  fullname.vb: Toscana.IToscaEntityWithProperties(Of T).Properties
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaAttribute}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaAttribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaAttribute>
  nameWithType: Dictionary<String, ToscaAttribute>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaAttribute>
  nameWithType.vb: Dictionary(Of String, ToscaAttribute)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaAttribute)
  name.vb: Dictionary(Of String, ToscaAttribute)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaAttribute
    name: ToscaAttribute
    nameWithType: ToscaAttribute
    fullName: Toscana.ToscaAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaAttribute
    name: ToscaAttribute
    nameWithType: ToscaAttribute
    fullName: Toscana.ToscaAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRequirement}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,Toscana.ToscaRequirement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Dictionary<String, ToscaRequirement>>
  nameWithType: List<Dictionary<String, ToscaRequirement>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.Dictionary<System.String, Toscana.ToscaRequirement>>
  nameWithType.vb: List(Of Dictionary(Of String, ToscaRequirement))
  fullname.vb: System.Collections.Generic.List(Of System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaRequirement))
  name.vb: List(Of Dictionary(Of String, ToscaRequirement))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapability}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapability}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaCapability>
  nameWithType: Dictionary<String, ToscaCapability>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaCapability>
  nameWithType.vb: Dictionary(Of String, ToscaCapability)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaCapability)
  name.vb: Dictionary(Of String, ToscaCapability)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaCapability
    name: ToscaCapability
    nameWithType: ToscaCapability
    fullName: Toscana.ToscaCapability
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaCapability
    name: ToscaCapability
    nameWithType: ToscaCapability
    fullName: Toscana.ToscaCapability
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Object}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Dictionary<String, Object>>
  nameWithType: Dictionary<String, Dictionary<String, Object>>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Collections.Generic.Dictionary<System.String, System.Object>>
  nameWithType.vb: Dictionary(Of String, Dictionary(Of String, Object))
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object))
  name.vb: Dictionary(Of String, Dictionary(Of String, Object))
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaArtifact}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaArtifact}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaArtifact>
  nameWithType: Dictionary<String, ToscaArtifact>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaArtifact>
  nameWithType.vb: Dictionary(Of String, ToscaArtifact)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaArtifact)
  name.vb: Dictionary(Of String, ToscaArtifact)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaArtifact
    name: ToscaArtifact
    nameWithType: ToscaArtifact
    fullName: Toscana.ToscaArtifact
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaArtifact
    name: ToscaArtifact
    nameWithType: ToscaArtifact
    fullName: Toscana.ToscaArtifact
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaObject{Toscana.ToscaNodeType}.GetDerivedFromEntity
  commentId: M:Toscana.ToscaObject{Toscana.ToscaNodeType}.GetDerivedFromEntity
  parent: Toscana.ToscaObject{Toscana.ToscaNodeType}
  definition: Toscana.ToscaObject`1.GetDerivedFromEntity
  name: GetDerivedFromEntity()
  nameWithType: ToscaObject<ToscaNodeType>.GetDerivedFromEntity()
  fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.GetDerivedFromEntity()
  nameWithType.vb: ToscaObject(Of ToscaNodeType).GetDerivedFromEntity()
  fullname.vb: Toscana.ToscaObject(Of Toscana.ToscaNodeType).GetDerivedFromEntity()
  spec.csharp:
  - uid: Toscana.ToscaObject`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: ToscaObject<ToscaNodeType>.GetDerivedFromEntity
    fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: ToscaObject(Of ToscaNodeType).GetDerivedFromEntity
    fullName: Toscana.ToscaObject(Of Toscana.ToscaNodeType).GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}.GetDerivedFromEntity
  commentId: M:Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}.GetDerivedFromEntity
  parent: Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}
  definition: Toscana.IDerivableToscaEntity`1.GetDerivedFromEntity
  name: GetDerivedFromEntity()
  nameWithType: IDerivableToscaEntity<ToscaNodeType>.GetDerivedFromEntity()
  fullName: Toscana.IDerivableToscaEntity<Toscana.ToscaNodeType>.GetDerivedFromEntity()
  nameWithType.vb: IDerivableToscaEntity(Of ToscaNodeType).GetDerivedFromEntity()
  fullname.vb: Toscana.IDerivableToscaEntity(Of Toscana.ToscaNodeType).GetDerivedFromEntity()
  spec.csharp:
  - uid: Toscana.IDerivableToscaEntity`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: IDerivableToscaEntity<ToscaNodeType>.GetDerivedFromEntity
    fullName: Toscana.IDerivableToscaEntity<Toscana.ToscaNodeType>.GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.IDerivableToscaEntity`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: IDerivableToscaEntity(Of ToscaNodeType).GetDerivedFromEntity
    fullName: Toscana.IDerivableToscaEntity(Of Toscana.ToscaNodeType).GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.Exceptions.ToscaNodeTypeNotFoundException
  commentId: T:Toscana.Exceptions.ToscaNodeTypeNotFoundException
  isExternal: false
  name: ToscaNodeTypeNotFoundException
  nameWithType: ToscaNodeTypeNotFoundException
  fullName: Toscana.Exceptions.ToscaNodeTypeNotFoundException
- uid: Toscana.ToscaNodeType
  commentId: T:Toscana.ToscaNodeType
  parent: Toscana
  isExternal: false
  name: ToscaNodeType
  nameWithType: ToscaNodeType
  fullName: Toscana.ToscaNodeType
- uid: Toscana.ToscaObject`1.GetDerivedFromEntity
  commentId: M:Toscana.ToscaObject`1.GetDerivedFromEntity
  isExternal: false
  name: GetDerivedFromEntity()
  nameWithType: ToscaObject<T>.GetDerivedFromEntity()
  fullName: Toscana.ToscaObject<T>.GetDerivedFromEntity()
  nameWithType.vb: ToscaObject(Of T).GetDerivedFromEntity()
  fullname.vb: Toscana.ToscaObject(Of T).GetDerivedFromEntity()
  spec.csharp:
  - uid: Toscana.ToscaObject`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: ToscaObject<T>.GetDerivedFromEntity
    fullName: Toscana.ToscaObject<T>.GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: ToscaObject(Of T).GetDerivedFromEntity
    fullName: Toscana.ToscaObject(Of T).GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IDerivableToscaEntity`1.GetDerivedFromEntity
  commentId: M:Toscana.IDerivableToscaEntity`1.GetDerivedFromEntity
  isExternal: false
  name: GetDerivedFromEntity()
  nameWithType: IDerivableToscaEntity<T>.GetDerivedFromEntity()
  fullName: Toscana.IDerivableToscaEntity<T>.GetDerivedFromEntity()
  nameWithType.vb: IDerivableToscaEntity(Of T).GetDerivedFromEntity()
  fullname.vb: Toscana.IDerivableToscaEntity(Of T).GetDerivedFromEntity()
  spec.csharp:
  - uid: Toscana.IDerivableToscaEntity`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: IDerivableToscaEntity<T>.GetDerivedFromEntity
    fullName: Toscana.IDerivableToscaEntity<T>.GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.IDerivableToscaEntity`1.GetDerivedFromEntity
    name: GetDerivedFromEntity
    nameWithType: IDerivableToscaEntity(Of T).GetDerivedFromEntity
    fullName: Toscana.IDerivableToscaEntity(Of T).GetDerivedFromEntity
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{Toscana.ToscaRequirement}
  commentId: T:System.Collections.Generic.List{Toscana.ToscaRequirement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ToscaRequirement>
  nameWithType: List<ToscaRequirement>
  fullName: System.Collections.Generic.List<Toscana.ToscaRequirement>
  nameWithType.vb: List(Of ToscaRequirement)
  fullname.vb: System.Collections.Generic.List(Of Toscana.ToscaRequirement)
  name.vb: List(Of ToscaRequirement)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Toscana.ToscaRequirement
    name: ToscaRequirement
    nameWithType: ToscaRequirement
    fullName: Toscana.ToscaRequirement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapabilityType}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Toscana.ToscaCapabilityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, ToscaCapabilityType>
  nameWithType: Dictionary<String, ToscaCapabilityType>
  fullName: System.Collections.Generic.Dictionary<System.String, Toscana.ToscaCapabilityType>
  nameWithType.vb: Dictionary(Of String, ToscaCapabilityType)
  fullname.vb: System.Collections.Generic.Dictionary(Of System.String, Toscana.ToscaCapabilityType)
  name.vb: Dictionary(Of String, ToscaCapabilityType)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaCapabilityType
    name: ToscaCapabilityType
    nameWithType: ToscaCapabilityType
    fullName: Toscana.ToscaCapabilityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaCapabilityType
    name: ToscaCapabilityType
    nameWithType: ToscaCapabilityType
    fullName: Toscana.ToscaCapabilityType
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaRequirement
  commentId: T:Toscana.ToscaRequirement
  parent: Toscana
  isExternal: false
  name: ToscaRequirement
  nameWithType: ToscaRequirement
  fullName: Toscana.ToscaRequirement
- uid: Toscana.ToscaObject{Toscana.ToscaNodeType}.SetDerivedFromToRoot(System.String)
  commentId: M:Toscana.ToscaObject{Toscana.ToscaNodeType}.SetDerivedFromToRoot(System.String)
  parent: Toscana.ToscaObject{Toscana.ToscaNodeType}
  definition: Toscana.ToscaObject`1.SetDerivedFromToRoot(System.String)
  name: SetDerivedFromToRoot(String)
  nameWithType: ToscaObject<ToscaNodeType>.SetDerivedFromToRoot(String)
  fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.SetDerivedFromToRoot(System.String)
  nameWithType.vb: ToscaObject(Of ToscaNodeType).SetDerivedFromToRoot(String)
  fullname.vb: Toscana.ToscaObject(Of Toscana.ToscaNodeType).SetDerivedFromToRoot(System.String)
  spec.csharp:
  - uid: Toscana.ToscaObject`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: ToscaObject<ToscaNodeType>.SetDerivedFromToRoot
    fullName: Toscana.ToscaObject<Toscana.ToscaNodeType>.SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: ToscaObject(Of ToscaNodeType).SetDerivedFromToRoot
    fullName: Toscana.ToscaObject(Of Toscana.ToscaNodeType).SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}.SetDerivedFromToRoot(System.String)
  commentId: M:Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}.SetDerivedFromToRoot(System.String)
  parent: Toscana.IDerivableToscaEntity{Toscana.ToscaNodeType}
  definition: Toscana.IDerivableToscaEntity`1.SetDerivedFromToRoot(System.String)
  name: SetDerivedFromToRoot(String)
  nameWithType: IDerivableToscaEntity<ToscaNodeType>.SetDerivedFromToRoot(String)
  fullName: Toscana.IDerivableToscaEntity<Toscana.ToscaNodeType>.SetDerivedFromToRoot(System.String)
  nameWithType.vb: IDerivableToscaEntity(Of ToscaNodeType).SetDerivedFromToRoot(String)
  fullname.vb: Toscana.IDerivableToscaEntity(Of Toscana.ToscaNodeType).SetDerivedFromToRoot(System.String)
  spec.csharp:
  - uid: Toscana.IDerivableToscaEntity`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: IDerivableToscaEntity<ToscaNodeType>.SetDerivedFromToRoot
    fullName: Toscana.IDerivableToscaEntity<Toscana.ToscaNodeType>.SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.IDerivableToscaEntity`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: IDerivableToscaEntity(Of ToscaNodeType).SetDerivedFromToRoot
    fullName: Toscana.IDerivableToscaEntity(Of Toscana.ToscaNodeType).SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.ToscaObject`1.SetDerivedFromToRoot(System.String)
  commentId: M:Toscana.ToscaObject`1.SetDerivedFromToRoot(System.String)
  isExternal: true
  name: SetDerivedFromToRoot(String)
  nameWithType: ToscaObject<T>.SetDerivedFromToRoot(String)
  fullName: Toscana.ToscaObject<T>.SetDerivedFromToRoot(System.String)
  nameWithType.vb: ToscaObject(Of T).SetDerivedFromToRoot(String)
  fullname.vb: Toscana.ToscaObject(Of T).SetDerivedFromToRoot(System.String)
  spec.csharp:
  - uid: Toscana.ToscaObject`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: ToscaObject<T>.SetDerivedFromToRoot
    fullName: Toscana.ToscaObject<T>.SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.ToscaObject`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: ToscaObject(Of T).SetDerivedFromToRoot
    fullName: Toscana.ToscaObject(Of T).SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Toscana.IDerivableToscaEntity`1.SetDerivedFromToRoot(System.String)
  commentId: M:Toscana.IDerivableToscaEntity`1.SetDerivedFromToRoot(System.String)
  isExternal: true
  name: SetDerivedFromToRoot(String)
  nameWithType: IDerivableToscaEntity<T>.SetDerivedFromToRoot(String)
  fullName: Toscana.IDerivableToscaEntity<T>.SetDerivedFromToRoot(System.String)
  nameWithType.vb: IDerivableToscaEntity(Of T).SetDerivedFromToRoot(String)
  fullname.vb: Toscana.IDerivableToscaEntity(Of T).SetDerivedFromToRoot(System.String)
  spec.csharp:
  - uid: Toscana.IDerivableToscaEntity`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: IDerivableToscaEntity<T>.SetDerivedFromToRoot
    fullName: Toscana.IDerivableToscaEntity<T>.SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Toscana.IDerivableToscaEntity`1.SetDerivedFromToRoot(System.String)
    name: SetDerivedFromToRoot
    nameWithType: IDerivableToscaEntity(Of T).SetDerivedFromToRoot
    fullName: Toscana.IDerivableToscaEntity(Of T).SetDerivedFromToRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,Toscana.ToscaProperty}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,Toscana.ToscaProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, ToscaProperty>
  nameWithType: IReadOnlyDictionary<String, ToscaProperty>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, Toscana.ToscaProperty>
  nameWithType.vb: IReadOnlyDictionary(Of String, ToscaProperty)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, Toscana.ToscaProperty)
  name.vb: IReadOnlyDictionary(Of String, ToscaProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaProperty
    name: ToscaProperty
    nameWithType: ToscaProperty
    fullName: Toscana.ToscaProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Toscana.ToscaProperty
    name: ToscaProperty
    nameWithType: ToscaProperty
    fullName: Toscana.ToscaProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  commentId: M:System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  parent: System.ComponentModel.DataAnnotations.IValidatableObject
  isExternal: true
  name: Validate(ValidationContext)
  nameWithType: IValidatableObject.Validate(ValidationContext)
  fullName: System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
  spec.csharp:
  - uid: System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
    name: Validate
    nameWithType: IValidatableObject.Validate
    fullName: System.ComponentModel.DataAnnotations.IValidatableObject.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    nameWithType: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.DataAnnotations.IValidatableObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)
    name: Validate
    nameWithType: IValidatableObject.Validate
    fullName: System.ComponentModel.DataAnnotations.IValidatableObject.Validate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    nameWithType: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.ValidationContext
  commentId: T:System.ComponentModel.DataAnnotations.ValidationContext
  parent: System.ComponentModel.DataAnnotations
  isExternal: true
  name: ValidationContext
  nameWithType: ValidationContext
  fullName: System.ComponentModel.DataAnnotations.ValidationContext
- uid: System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}
  commentId: T:System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ValidationResult>
  nameWithType: IEnumerable<ValidationResult>
  fullName: System.Collections.Generic.IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult>
  nameWithType.vb: IEnumerable(Of ValidationResult)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.ComponentModel.DataAnnotations.ValidationResult)
  name.vb: IEnumerable(Of ValidationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ComponentModel.DataAnnotations.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
